
Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005668  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a0  080058a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080058a0  080058a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a0  080058a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e70  20000074  0800591c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  0800591c  00020ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001624d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003554  00000000  00000000  000362e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001907a  00000000  00000000  0003bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ac2  00000000  00000000  00054f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097881  00000000  00000000  0006ca24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001042a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  001042f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005710 	.word	0x08005710

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08005710 	.word	0x08005710

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b08e      	sub	sp, #56	; 0x38
 80003f8:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80003fa:	2300      	movs	r3, #0
 80003fc:	637b      	str	r3, [r7, #52]	; 0x34
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80003fe:	2334      	movs	r3, #52	; 0x34
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	2101      	movs	r1, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f002 fd10 	bl	8002e2a <osSemaphoreCreate>
 800040a:	0002      	movs	r2, r0
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_FREERTOS_Init+0x78>)
 800040e:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint8_t);
 8000410:	212c      	movs	r1, #44	; 0x2c
 8000412:	187b      	adds	r3, r7, r1
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <MX_FREERTOS_Init+0x7c>)
 8000416:	ca11      	ldmia	r2!, {r0, r4}
 8000418:	c311      	stmia	r3!, {r0, r4}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fd9e 	bl	8002f60 <osMessageCreate>
 8000424:	0002      	movs	r2, r0
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_FREERTOS_Init+0x80>)
 8000428:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 800042a:	2118      	movs	r1, #24
 800042c:	187b      	adds	r3, r7, r1
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_FREERTOS_Init+0x84>)
 8000430:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000432:	c331      	stmia	r3!, {r0, r4, r5}
 8000434:	ca11      	ldmia	r2!, {r0, r4}
 8000436:	c311      	stmia	r3!, {r0, r4}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2100      	movs	r1, #0
 800043c:	0018      	movs	r0, r3
 800043e:	f002 fcb8 	bl	8002db2 <osThreadCreate>
 8000442:	0002      	movs	r2, r0
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <MX_FREERTOS_Init+0x88>)
 8000446:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <MX_FREERTOS_Init+0x8c>)
 800044c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800044e:	c313      	stmia	r3!, {r0, r1, r4}
 8000450:	ca03      	ldmia	r2!, {r0, r1}
 8000452:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2100      	movs	r1, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fcaa 	bl	8002db2 <osThreadCreate>
 800045e:	0002      	movs	r2, r0
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_FREERTOS_Init+0x90>)
 8000462:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b00e      	add	sp, #56	; 0x38
 800046a:	bdb0      	pop	{r4, r5, r7, pc}
 800046c:	2000009c 	.word	0x2000009c
 8000470:	08005740 	.word	0x08005740
 8000474:	20000098 	.word	0x20000098
 8000478:	08005748 	.word	0x08005748
 800047c:	20000090 	.word	0x20000090
 8000480:	0800575c 	.word	0x0800575c
 8000484:	20000094 	.word	0x20000094

08000488 <StartTask01>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
//	uint32_t wakeuptime;
	//osPriority priority;
	/* Infinite loop */
	for(;;)
	{
		osDelay(2000);
 8000490:	23fa      	movs	r3, #250	; 0xfa
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	0018      	movs	r0, r3
 8000496:	f002 fcb4 	bl	8002e02 <osDelay>
		printf("Task 1 Release semaphore \r\n");
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <StartTask01+0x28>)
 800049c:	0018      	movs	r0, r3
 800049e:	f004 fc5f 	bl	8004d60 <puts>
		osSemaphoreRelease(myBinarySem01Handle);
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <StartTask01+0x2c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fd28 	bl	8002efc <osSemaphoreRelease>
		osDelay(2000);
 80004ac:	e7f0      	b.n	8000490 <StartTask01+0x8>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	08005770 	.word	0x08005770
 80004b4:	2000009c 	.word	0x2000009c

080004b8 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
//	osEvent retvalue;

	/* Infinite loop */
	for(;;)
	{
		osSemaphoreWait(myBinarySem01Handle, 4000);
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <StartTask02+0x24>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	22fa      	movs	r2, #250	; 0xfa
 80004c6:	0112      	lsls	r2, r2, #4
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fccc 	bl	8002e68 <osSemaphoreWait>
		printf("Task 2 Synchronized \r\n");
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <StartTask02+0x28>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f004 fc44 	bl	8004d60 <puts>
		osSemaphoreWait(myBinarySem01Handle, 4000);
 80004d8:	e7f2      	b.n	80004c0 <StartTask02+0x8>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	2000009c 	.word	0x2000009c
 80004e0:	0800578c 	.word	0x0800578c

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f004 fbb9 	bl	8004c6a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_GPIO_Init+0x68>)
 80004fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_GPIO_Init+0x68>)
 80004fe:	2101      	movs	r1, #1
 8000500:	430a      	orrs	r2, r1
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_GPIO_Init+0x68>)
 8000506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000508:	2201      	movs	r2, #1
 800050a:	4013      	ands	r3, r2
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2200      	movs	r2, #0
 8000516:	2120      	movs	r1, #32
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fd6f 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2220      	movs	r2, #32
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000536:	1d3a      	adds	r2, r7, #4
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fbf8 	bl	8000d34 <HAL_GPIO_Init>

}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b006      	add	sp, #24
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fae0 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f7ff ffc2 	bl	80004e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000560:	f000 fa02 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000564:	f7ff ff46 	bl	80003f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000568:	f002 fc1b 	bl	8002da2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2120      	movs	r1, #32
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fd5f 	bl	8001036 <HAL_GPIO_TogglePin>
		printf("teste \r\n");
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <main+0x3c>)
 800057a:	0018      	movs	r0, r3
 800057c:	f004 fbf0 	bl	8004d60 <puts>
		HAL_Delay(1000);
 8000580:	23fa      	movs	r3, #250	; 0xfa
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fb03 	bl	8000b90 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800058a:	e7ef      	b.n	800056c <main+0x1c>
 800058c:	080057a4 	.word	0x080057a4

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b093      	sub	sp, #76	; 0x4c
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	2414      	movs	r4, #20
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2334      	movs	r3, #52	; 0x34
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f004 fb62 	bl	8004c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	0018      	movs	r0, r3
 80005aa:	2310      	movs	r3, #16
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f004 fb5b 	bl	8004c6a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fd57 	bl	800106c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2202      	movs	r2, #2
 80005c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005cc:	0021      	movs	r1, r4
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2240      	movs	r2, #64	; 0x40
 80005d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2208      	movs	r2, #8
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	0292      	lsls	r2, r2, #10
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0592      	lsls	r2, r2, #22
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fd7d 	bl	8001104 <HAL_RCC_OscConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060e:	f000 f841 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2202      	movs	r2, #2
 800061c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2102      	movs	r1, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f878 	bl	8001724 <HAL_RCC_ClockConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000638:	f000 f82c 	bl	8000694 <Error_Handler>
  }
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b013      	add	sp, #76	; 0x4c
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(uint8_t ch)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	0002      	movs	r2, r0
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	1df9      	adds	r1, r7, #7
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <__io_putchar+0x28>)
 8000658:	2201      	movs	r2, #1
 800065a:	f001 fe57 	bl	800230c <HAL_UART_Transmit>
	return ch;
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	200000f0 	.word	0x200000f0

08000670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d101      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000682:	f000 fa69 	bl	8000b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40014800 	.word	0x40014800

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_MspInit+0x50>)
 80006a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_MspInit+0x50>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_MspInit+0x50>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_MspInit+0x50>)
 80006c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_MspInit+0x50>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0549      	lsls	r1, r1, #21
 80006c8:	430a      	orrs	r2, r1
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_MspInit+0x50>)
 80006ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	055b      	lsls	r3, r3, #21
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006da:	2302      	movs	r3, #2
 80006dc:	425b      	negs	r3, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	2103      	movs	r1, #3
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fb00 	bl	8000ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006fc:	232b      	movs	r3, #43	; 0x2b
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <HAL_InitTick+0xf4>)
 8000706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <HAL_InitTick+0xf4>)
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	02c9      	lsls	r1, r1, #11
 800070e:	430a      	orrs	r2, r1
 8000710:	641a      	str	r2, [r3, #64]	; 0x40
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <HAL_InitTick+0xf4>)
 8000714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	02db      	lsls	r3, r3, #11
 800071a:	4013      	ands	r3, r2
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000720:	230c      	movs	r3, #12
 8000722:	18fa      	adds	r2, r7, r3
 8000724:	2410      	movs	r4, #16
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0011      	movs	r1, r2
 800072a:	0018      	movs	r0, r3
 800072c:	f001 f9a4 	bl	8001a78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d104      	bne.n	8000746 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800073c:	f001 f986 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8000740:	0003      	movs	r3, r0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000744:	e004      	b.n	8000750 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000746:	f001 f981 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 800074a:	0003      	movs	r3, r0
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000752:	4926      	ldr	r1, [pc, #152]	; (80007ec <HAL_InitTick+0xf8>)
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff fcd7 	bl	8000108 <__udivsi3>
 800075a:	0003      	movs	r3, r0
 800075c:	3b01      	subs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_InitTick+0xfc>)
 8000762:	4a24      	ldr	r2, [pc, #144]	; (80007f4 <HAL_InitTick+0x100>)
 8000764:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_InitTick+0xfc>)
 8000768:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <HAL_InitTick+0x104>)
 800076a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_InitTick+0xfc>)
 800076e:	6a3a      	ldr	r2, [r7, #32]
 8000770:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_InitTick+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_InitTick+0xfc>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_InitTick+0xfc>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8000784:	252b      	movs	r5, #43	; 0x2b
 8000786:	197c      	adds	r4, r7, r5
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_InitTick+0xfc>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fad2 	bl	8001d34 <HAL_TIM_Base_Init>
 8000790:	0003      	movs	r3, r0
 8000792:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000794:	197b      	adds	r3, r7, r5
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d11e      	bne.n	80007da <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800079c:	197c      	adds	r4, r7, r5
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_InitTick+0xfc>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fb27 	bl	8001df4 <HAL_TIM_Base_Start_IT>
 80007a6:	0003      	movs	r3, r0
 80007a8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d113      	bne.n	80007da <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80007b2:	2016      	movs	r0, #22
 80007b4:	f000 faad 	bl	8000d12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d809      	bhi.n	80007d2 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	0019      	movs	r1, r3
 80007c4:	2016      	movs	r0, #22
 80007c6:	f000 fa8f 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_InitTick+0x108>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e003      	b.n	80007da <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80007d2:	232b      	movs	r3, #43	; 0x2b
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80007da:	232b      	movs	r3, #43	; 0x2b
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	781b      	ldrb	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b00c      	add	sp, #48	; 0x30
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	000f4240 	.word	0x000f4240
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	40014800 	.word	0x40014800
 80007f8:	000003e7 	.word	0x000003e7
 80007fc:	20000004 	.word	0x20000004

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <TIM17_IRQHandler+0x14>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fb44 	bl	8001ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200000a0 	.word	0x200000a0

08000824 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e00a      	b.n	800084c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000836:	e000      	b.n	800083a <_read+0x16>
 8000838:	bf00      	nop
 800083a:	0001      	movs	r1, r0
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	60ba      	str	r2, [r7, #8]
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf0      	blt.n	8000836 <_read+0x12>
	}

return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b006      	add	sp, #24
 800085c:	bd80      	pop	{r7, pc}

0800085e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e009      	b.n	8000884 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff fee3 	bl	8000644 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbf1      	blt.n	8000870 <_write+0x12>
	}
	return len;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	0018      	movs	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	b006      	add	sp, #24
 8000894:	bd80      	pop	{r7, pc}

08000896 <_close>:

int _close(int file)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return -1;
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
}
 80008a2:	0018      	movs	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0192      	lsls	r2, r2, #6
 80008ba:	605a      	str	r2, [r3, #4]
	return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f004 f970 	bl	8004c04 <__errno>
 8000924:	0003      	movs	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	2301      	movs	r3, #1
 800092c:	425b      	negs	r3, r3
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	18d2      	adds	r2, r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <_sbrk+0x64>)
 8000940:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	b006      	add	sp, #24
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20009000 	.word	0x20009000
 8000950:	00000400 	.word	0x00000400
 8000954:	200000ec 	.word	0x200000ec
 8000958:	20000ee8 	.word	0x20000ee8

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_USART2_UART_Init+0x94>)
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <MX_USART2_UART_Init+0x98>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART2_UART_Init+0x94>)
 8000974:	22e1      	movs	r2, #225	; 0xe1
 8000976:	0252      	lsls	r2, r2, #9
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_USART2_UART_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_USART2_UART_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART2_UART_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_USART2_UART_Init+0x94>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART2_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_USART2_UART_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fc54 	bl	8002260 <HAL_UART_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f7ff fe6a 	bl	8000694 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 f8e5 	bl	8002b94 <HAL_UARTEx_SetTxFifoThreshold>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f7ff fe61 	bl	8000694 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 f91c 	bl	8002c14 <HAL_UARTEx_SetRxFifoThreshold>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f7ff fe58 	bl	8000694 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x94>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f89a 	bl	8002b20 <HAL_UARTEx_DisableFifoMode>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f7ff fe50 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	200000f0 	.word	0x200000f0
 8000a00:	40004400 	.word	0x40004400

08000a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b091      	sub	sp, #68	; 0x44
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	232c      	movs	r3, #44	; 0x2c
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f004 f927 	bl	8004c6a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	2410      	movs	r4, #16
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	0018      	movs	r0, r3
 8000a22:	231c      	movs	r3, #28
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f004 f91f 	bl	8004c6a <memset>
  if(uartHandle->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_UART_MspInit+0xb8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d13e      	bne.n	8000ab4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2202      	movs	r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f841 	bl	8001acc <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a4e:	f7ff fe21 	bl	8000694 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0289      	lsls	r1, r1, #10
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a86:	212c      	movs	r1, #44	; 0x2c
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2202      	movs	r2, #2
 8000a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	187a      	adds	r2, r7, r1
 8000aa8:	23a0      	movs	r3, #160	; 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f940 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b011      	add	sp, #68	; 0x44
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f7ff ff48 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af2:	f004 f88d 	bl	8004c10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000af6:	f7ff fd2b 	bl	8000550 <main>

08000afa <LoopForever>:

LoopForever:
  b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   r0, =_estack
 8000afc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b08:	080058a8 	.word	0x080058a8
  ldr r2, =_sbss
 8000b0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b10:	20000ee4 	.word	0x20000ee4

08000b14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x3c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Init+0x3c>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0049      	lsls	r1, r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	2003      	movs	r0, #3
 8000b34:	f7ff fdde 	bl	80006f4 <HAL_InitTick>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e001      	b.n	8000b48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fdac 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	18d2      	adds	r2, r2, r3
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000184 	.word	0x20000184

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000184 	.word	0x20000184

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff0 	bl	8000b7c <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	001a      	movs	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	189b      	adds	r3, r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	f7ff ffe0 	bl	8000b7c <HAL_GetTick>
 8000bbc:	0002      	movs	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bea:	d809      	bhi.n	8000c00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_EnableIRQ+0x30>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c20:	d828      	bhi.n	8000c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c22:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	33c0      	adds	r3, #192	; 0xc0
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	589b      	ldr	r3, [r3, r2]
 8000c32:	1dfa      	adds	r2, r7, #7
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	0011      	movs	r1, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	21ff      	movs	r1, #255	; 0xff
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	401a      	ands	r2, r3
 8000c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	22ff      	movs	r2, #255	; 0xff
 8000c50:	401a      	ands	r2, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0018      	movs	r0, r3
 8000c58:	2303      	movs	r3, #3
 8000c5a:	4003      	ands	r3, r0
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c72:	e031      	b.n	8000cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	400b      	ands	r3, r1
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3306      	adds	r3, #6
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001c      	movs	r4, r3
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	4023      	ands	r3, r4
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	3306      	adds	r3, #6
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	18c3      	adds	r3, r0, r3
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b003      	add	sp, #12
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff81 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	0002      	movs	r2, r0
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ff57 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e147      	b.n	8000fd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <HAL_GPIO_Init+0x28>
 8000d5a:	e138      	b.n	8000fce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2207      	movs	r2, #7
 8000e30:	4013      	ands	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	401a      	ands	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d100      	bne.n	8000ea8 <HAL_GPIO_Init+0x174>
 8000ea6:	e092      	b.n	8000fce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ea8:	4a50      	ldr	r2, [pc, #320]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3318      	adds	r3, #24
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	589b      	ldr	r3, [r3, r2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	23a0      	movs	r3, #160	; 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x1ca>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a45      	ldr	r2, [pc, #276]	; (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x1c6>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <HAL_GPIO_Init+0x2c0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x1c2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <HAL_GPIO_Init+0x2c4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x1be>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000efe:	2300      	movs	r3, #0
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	2103      	movs	r1, #3
 8000f04:	400a      	ands	r2, r1
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f10:	4936      	ldr	r1, [pc, #216]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3318      	adds	r3, #24
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	035b      	lsls	r3, r3, #13
 8000f36:	4013      	ands	r3, r2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	039b      	lsls	r3, r3, #14
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f74:	2384      	movs	r3, #132	; 0x84
 8000f76:	58d3      	ldr	r3, [r2, r3]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f98:	4914      	ldr	r1, [pc, #80]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f9a:	2284      	movs	r2, #132	; 0x84
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	58d3      	ldr	r3, [r2, r3]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ae>
 8000fe0:	e6b0      	b.n	8000d44 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	50000400 	.word	0x50000400
 8000ff4:	50000800 	.word	0x50000800
 8000ff8:	50000c00 	.word	0x50000c00

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	0008      	movs	r0, r1
 8001006:	0011      	movs	r1, r2
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	1c7b      	adds	r3, r7, #1
 8001010:	1c0a      	adds	r2, r1, #0
 8001012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001014:	1c7b      	adds	r3, r7, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101c:	1cbb      	adds	r3, r7, #2
 800101e:	881a      	ldrh	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001026:	1cbb      	adds	r3, r7, #2
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	000a      	movs	r2, r1
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	1cb9      	adds	r1, r7, #2
 800105a:	8809      	ldrh	r1, [r1, #0]
 800105c:	400b      	ands	r3, r1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b004      	add	sp, #16
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800107a:	4013      	ands	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	429a      	cmp	r2, r3
 800108e:	d11f      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	0013      	movs	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	189b      	adds	r3, r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4912      	ldr	r1, [pc, #72]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff f832 	bl	8000108 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	e008      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e001      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e009      	b.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	401a      	ands	r2, r3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d0ed      	beq.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40007000 	.word	0x40007000
 80010e0:	fffff9ff 	.word	0xfffff9ff
 80010e4:	20000000 	.word	0x20000000
 80010e8:	000f4240 	.word	0x000f4240

080010ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	23e0      	movs	r3, #224	; 0xe0
 80010f6:	01db      	lsls	r3, r3, #7
 80010f8:	4013      	ands	r3, r2
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e2f3      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x1e>
 8001120:	e07c      	b.n	800121c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001122:	4bc3      	ldr	r3, [pc, #780]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2238      	movs	r2, #56	; 0x38
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800112c:	4bc0      	ldr	r3, [pc, #768]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x3e>
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d002      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4bb9      	ldr	r3, [pc, #740]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d062      	beq.n	800121a <HAL_RCC_OscConfig+0x116>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d15e      	bne.n	800121a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e2ce      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	429a      	cmp	r2, r3
 800116a:	d107      	bne.n	800117c <HAL_RCC_OscConfig+0x78>
 800116c:	4bb0      	ldr	r3, [pc, #704]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4baf      	ldr	r3, [pc, #700]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	0249      	lsls	r1, r1, #9
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e020      	b.n	80011be <HAL_RCC_OscConfig+0xba>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	02db      	lsls	r3, r3, #11
 8001184:	429a      	cmp	r2, r3
 8001186:	d10e      	bne.n	80011a6 <HAL_RCC_OscConfig+0xa2>
 8001188:	4ba9      	ldr	r3, [pc, #676]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4ba8      	ldr	r3, [pc, #672]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	02c9      	lsls	r1, r1, #11
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4ba6      	ldr	r3, [pc, #664]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4ba5      	ldr	r3, [pc, #660]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	0249      	lsls	r1, r1, #9
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e00b      	b.n	80011be <HAL_RCC_OscConfig+0xba>
 80011a6:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4ba1      	ldr	r3, [pc, #644]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	49a1      	ldr	r1, [pc, #644]	; (8001434 <HAL_RCC_OscConfig+0x330>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4b9f      	ldr	r3, [pc, #636]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b9e      	ldr	r3, [pc, #632]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	499f      	ldr	r1, [pc, #636]	; (8001438 <HAL_RCC_OscConfig+0x334>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d014      	beq.n	80011f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fcd9 	bl	8000b7c <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fcd4 	bl	8000b7c <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e28d      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e2:	4b93      	ldr	r3, [pc, #588]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	029b      	lsls	r3, r3, #10
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xcc>
 80011ee:	e015      	b.n	800121c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fcc4 	bl	8000b7c <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fcbf 	bl	8000b7c <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e278      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120c:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	4013      	ands	r3, r2
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0xf6>
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_RCC_OscConfig+0x124>
 8001226:	e099      	b.n	800135c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001228:	4b81      	ldr	r3, [pc, #516]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2238      	movs	r2, #56	; 0x38
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2203      	movs	r2, #3
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b10      	cmp	r3, #16
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x144>
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d002      	beq.n	800124e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d135      	bne.n	80012ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4013      	ands	r3, r2
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x162>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e24b      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_RCC_OscConfig+0x338>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	021a      	lsls	r2, r3, #8
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6e      	ldr	r2, [pc, #440]	; (8001440 <HAL_RCC_OscConfig+0x33c>)
 8001288:	4013      	ands	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	2207      	movs	r2, #7
 800129e:	4013      	ands	r3, r2
 80012a0:	4a68      	ldr	r2, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x340>)
 80012a2:	40da      	lsrs	r2, r3
 80012a4:	4b68      	ldr	r3, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x344>)
 80012a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a8:	4b68      	ldr	r3, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x348>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff fa21 	bl	80006f4 <HAL_InitTick>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d051      	beq.n	800135a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e221      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d030      	beq.n	8001324 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <HAL_RCC_OscConfig+0x33c>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	4b57      	ldr	r3, [pc, #348]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0049      	lsls	r1, r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc4a 	bl	8000b7c <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc45 	bl	8000b7c <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1fe      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001300:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4013      	ands	r3, r2
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_RCC_OscConfig+0x338>)
 8001312:	4013      	ands	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	021a      	lsls	r2, r3, #8
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	e01b      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800132a:	4949      	ldr	r1, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x34c>)
 800132c:	400a      	ands	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc24 	bl	8000b7c <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fc1f 	bl	8000b7c <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1d8      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4013      	ands	r3, r2
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x236>
 8001358:	e000      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2208      	movs	r2, #8
 8001362:	4013      	ands	r3, r2
 8001364:	d047      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2238      	movs	r2, #56	; 0x38
 800136c:	4013      	ands	r3, r2
 800136e:	2b18      	cmp	r3, #24
 8001370:	d10a      	bne.n	8001388 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d03c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d138      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e1ba      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d019      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fbee 	bl	8000b7c <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fbe9 	bl	8000b7c <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a2      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d0f1      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2a2>
 80013c2:	e018      	b.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	438a      	bics	r2, r1
 80013ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fbd4 	bl	8000b7c <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fbcf 	bl	8000b7c <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e188      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f1      	bne.n	80013da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2204      	movs	r2, #4
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x2fe>
 8001400:	e0c6      	b.n	8001590 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	231f      	movs	r3, #31
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2238      	movs	r2, #56	; 0x38
 8001410:	4013      	ands	r3, r2
 8001412:	2b20      	cmp	r3, #32
 8001414:	d11e      	bne.n	8001454 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_RCC_OscConfig+0x32c>)
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x31e>
 8001420:	e0b6      	b.n	8001590 <HAL_RCC_OscConfig+0x48c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d000      	beq.n	800142c <HAL_RCC_OscConfig+0x328>
 800142a:	e0b1      	b.n	8001590 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e166      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
 8001430:	40021000 	.word	0x40021000
 8001434:	fffeffff 	.word	0xfffeffff
 8001438:	fffbffff 	.word	0xfffbffff
 800143c:	ffff80ff 	.word	0xffff80ff
 8001440:	ffffc7ff 	.word	0xffffc7ff
 8001444:	00f42400 	.word	0x00f42400
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
 8001450:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001454:	4bac      	ldr	r3, [pc, #688]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	055b      	lsls	r3, r3, #21
 800145c:	4013      	ands	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x360>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x362>
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d011      	beq.n	800148e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4ba7      	ldr	r3, [pc, #668]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800146c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800146e:	4ba6      	ldr	r3, [pc, #664]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0549      	lsls	r1, r1, #21
 8001474:	430a      	orrs	r2, r1
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
 8001478:	4ba3      	ldr	r3, [pc, #652]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800147a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	055b      	lsls	r3, r3, #21
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001486:	231f      	movs	r3, #31
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148e:	4b9f      	ldr	r3, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x608>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4013      	ands	r3, r2
 8001498:	d11a      	bne.n	80014d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800149a:	4b9c      	ldr	r3, [pc, #624]	; (800170c <HAL_RCC_OscConfig+0x608>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b9b      	ldr	r3, [pc, #620]	; (800170c <HAL_RCC_OscConfig+0x608>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0049      	lsls	r1, r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb68 	bl	8000b7c <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7ff fb63 	bl	8000b7c <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e11c      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c4:	4b91      	ldr	r3, [pc, #580]	; (800170c <HAL_RCC_OscConfig+0x608>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3e2>
 80014d8:	4b8b      	ldr	r3, [pc, #556]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80014da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014dc:	4b8a      	ldr	r3, [pc, #552]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80014de:	2101      	movs	r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x41c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x404>
 80014ee:	4b86      	ldr	r3, [pc, #536]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80014f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	430a      	orrs	r2, r1
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014fa:	4b83      	ldr	r3, [pc, #524]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80014fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	65da      	str	r2, [r3, #92]	; 0x5c
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x41c>
 8001508:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800150a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c
 8001514:	4b7c      	ldr	r3, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800151a:	2104      	movs	r1, #4
 800151c:	438a      	bics	r2, r1
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d014      	beq.n	8001552 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb28 	bl	8000b7c <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001530:	e009      	b.n	8001546 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb23 	bl	8000b7c <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	4a74      	ldr	r2, [pc, #464]	; (8001710 <HAL_RCC_OscConfig+0x60c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0db      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x42e>
 8001550:	e013      	b.n	800157a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb13 	bl	8000b7c <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155a:	e009      	b.n	8001570 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fb0e 	bl	8000b7c <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0x60c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0c6      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800157a:	231f      	movs	r3, #31
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001588:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800158a:	4962      	ldr	r1, [pc, #392]	; (8001714 <HAL_RCC_OscConfig+0x610>)
 800158c:	400a      	ands	r2, r1
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x496>
 8001598:	e0b0      	b.n	80016fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2238      	movs	r2, #56	; 0x38
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d100      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4a4>
 80015a6:	e078      	b.n	800169a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d153      	bne.n	8001658 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80015b6:	4958      	ldr	r1, [pc, #352]	; (8001718 <HAL_RCC_OscConfig+0x614>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fade 	bl	8000b7c <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fad9 	bl	8000b7c <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e092      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d8:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x618>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1a      	ldr	r2, [r3, #32]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	431a      	orrs	r2, r3
 800160c:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0449      	lsls	r1, r1, #17
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0549      	lsls	r1, r1, #21
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff faa5 	bl	8000b7c <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff faa0 	bl	8000b7c <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e059      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	049b      	lsls	r3, r3, #18
 8001652:	4013      	ands	r3, r2
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x534>
 8001656:	e051      	b.n	80016fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800165e:	492e      	ldr	r1, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x614>)
 8001660:	400a      	ands	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fa8a 	bl	8000b7c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fa85 	bl	8000b7c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e03e      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	049b      	lsls	r3, r3, #18
 8001688:	4013      	ands	r3, r2
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 8001692:	4923      	ldr	r1, [pc, #140]	; (8001720 <HAL_RCC_OscConfig+0x61c>)
 8001694:	400a      	ands	r2, r1
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	e030      	b.n	80016fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e02b      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x604>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2203      	movs	r2, #3
 80016b0:	401a      	ands	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d11e      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2270      	movs	r2, #112	; 0x70
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d117      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	23fe      	movs	r3, #254	; 0xfe
 80016cc:	01db      	lsls	r3, r3, #7
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d10e      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	23f8      	movs	r3, #248	; 0xf8
 80016de:	039b      	lsls	r3, r3, #14
 80016e0:	401a      	ands	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	0f5b      	lsrs	r3, r3, #29
 80016ee:	075a      	lsls	r2, r3, #29
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b008      	add	sp, #32
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	00001388 	.word	0x00001388
 8001714:	efffffff 	.word	0xefffffff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	1fc1808c 	.word	0x1fc1808c
 8001720:	effefffc 	.word	0xeffefffc

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0e9      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2207      	movs	r2, #7
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d91e      	bls.n	8001784 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2207      	movs	r2, #7
 800174c:	4393      	bics	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001758:	f7ff fa10 	bl	8000b7c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff fa0b 	bl	8000b7c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_RCC_ClockConfig+0x1f4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0ca      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d1ee      	bne.n	8001762 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d015      	beq.n	80017ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d006      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001798:	4b60      	ldr	r3, [pc, #384]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 800179e:	21e0      	movs	r1, #224	; 0xe0
 80017a0:	01c9      	lsls	r1, r1, #7
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_RCC_ClockConfig+0x1fc>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	d057      	beq.n	8001874 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d12b      	bne.n	8001830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e097      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	049b      	lsls	r3, r3, #18
 80017ec:	4013      	ands	r3, r2
 80017ee:	d11f      	bne.n	8001830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e08b      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4013      	ands	r3, r2
 8001806:	d113      	bne.n	8001830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e07f      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d106      	bne.n	8001822 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d108      	bne.n	8001830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e074      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e06d      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2207      	movs	r2, #7
 8001836:	4393      	bics	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001844:	f7ff f99a 	bl	8000b7c <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184c:	e009      	b.n	8001862 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184e:	f7ff f995 	bl	8000b7c <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <HAL_RCC_ClockConfig+0x1f4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e054      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2238      	movs	r2, #56	; 0x38
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	429a      	cmp	r2, r3
 8001872:	d1ec      	bne.n	800184e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2207      	movs	r2, #7
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d21e      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001894:	f7ff f972 	bl	8000b7c <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7ff f96d 	bl	8000b7c <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_RCC_ClockConfig+0x1f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e02c      	b.n	800190c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2207      	movs	r2, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2204      	movs	r2, #4
 80018c6:	4013      	ands	r3, r2
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <HAL_RCC_ClockConfig+0x200>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018de:	f000 f829 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018e2:	0001      	movs	r1, r0
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_ClockConfig+0x1f8>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	220f      	movs	r2, #15
 80018ec:	401a      	ands	r2, r3
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x204>)
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	58d3      	ldr	r3, [r2, r3]
 80018f4:	221f      	movs	r2, #31
 80018f6:	4013      	ands	r3, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	40da      	lsrs	r2, r3
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x208>)
 80018fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x20c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0018      	movs	r0, r3
 8001906:	f7fe fef5 	bl	80006f4 <HAL_InitTick>
 800190a:	0003      	movs	r3, r0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40022000 	.word	0x40022000
 8001918:	00001388 	.word	0x00001388
 800191c:	40021000 	.word	0x40021000
 8001920:	fffff0ff 	.word	0xfffff0ff
 8001924:	ffff8fff 	.word	0xffff8fff
 8001928:	080057b4 	.word	0x080057b4
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2238      	movs	r2, #56	; 0x38
 8001940:	4013      	ands	r3, r2
 8001942:	d10f      	bne.n	8001964 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0adb      	lsrs	r3, r3, #11
 800194a:	2207      	movs	r2, #7
 800194c:	4013      	ands	r3, r2
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	4835      	ldr	r0, [pc, #212]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 800195a:	f7fe fbd5 	bl	8000108 <__udivsi3>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e05d      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2238      	movs	r2, #56	; 0x38
 800196a:	4013      	ands	r3, r2
 800196c:	2b08      	cmp	r3, #8
 800196e:	d102      	bne.n	8001976 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001970:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x100>)
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e054      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2238      	movs	r2, #56	; 0x38
 800197c:	4013      	ands	r3, r2
 800197e:	2b10      	cmp	r3, #16
 8001980:	d138      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2203      	movs	r2, #3
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	2207      	movs	r2, #7
 8001994:	4013      	ands	r3, r2
 8001996:	3301      	adds	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d10d      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	4824      	ldr	r0, [pc, #144]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x100>)
 80019a4:	f7fe fbb0 	bl	8000108 <__udivsi3>
 80019a8:	0003      	movs	r3, r0
 80019aa:	0019      	movs	r1, r3
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	227f      	movs	r2, #127	; 0x7f
 80019b4:	4013      	ands	r3, r2
 80019b6:	434b      	muls	r3, r1
 80019b8:	617b      	str	r3, [r7, #20]
        break;
 80019ba:	e00d      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019c0:	f7fe fba2 	bl	8000108 <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	227f      	movs	r2, #127	; 0x7f
 80019d0:	4013      	ands	r3, r2
 80019d2:	434b      	muls	r3, r1
 80019d4:	617b      	str	r3, [r7, #20]
        break;
 80019d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0f5b      	lsrs	r3, r3, #29
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	3301      	adds	r3, #1
 80019e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7fe fb8d 	bl	8000108 <__udivsi3>
 80019ee:	0003      	movs	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e015      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2238      	movs	r2, #56	; 0x38
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d103      	bne.n	8001a08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2238      	movs	r2, #56	; 0x38
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b18      	cmp	r3, #24
 8001a12:	d103      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a14:	23fa      	movs	r3, #250	; 0xfa
 8001a16:	01db      	lsls	r3, r3, #7
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e001      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a20:	693b      	ldr	r3, [r7, #16]
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b006      	add	sp, #24
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	007a1200 	.word	0x007a1200

08001a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a50:	f7ff fff2 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a54:	0004      	movs	r4, r0
 8001a56:	f7ff fb49 	bl	80010ec <LL_RCC_GetAPB1Prescaler>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	0b1a      	lsrs	r2, r3, #12
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	58d3      	ldr	r3, [r2, r3]
 8001a64:	221f      	movs	r2, #31
 8001a66:	4013      	ands	r3, r2
 8001a68:	40dc      	lsrs	r4, r3
 8001a6a:	0023      	movs	r3, r4
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	080057f4 	.word	0x080057f4

08001a78 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	23f0      	movs	r3, #240	; 0xf0
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_RCC_GetClockConfig+0x4c>)
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	23e0      	movs	r3, #224	; 0xe0
 8001aa8:	01db      	lsls	r3, r3, #7
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetClockConfig+0x50>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ad4:	2313      	movs	r3, #19
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001adc:	2312      	movs	r3, #18
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001af0:	e0a3      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2011      	movs	r0, #17
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afa:	4b86      	ldr	r3, [pc, #536]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	055b      	lsls	r3, r3, #21
 8001b02:	4013      	ands	r3, r2
 8001b04:	d110      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b83      	ldr	r3, [pc, #524]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0a:	4b82      	ldr	r3, [pc, #520]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0549      	lsls	r1, r1, #21
 8001b10:	430a      	orrs	r2, r1
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b14:	4b7f      	ldr	r3, [pc, #508]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	055b      	lsls	r3, r3, #21
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b28:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b7a      	ldr	r3, [pc, #488]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0049      	lsls	r1, r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f821 	bl	8000b7c <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7ff f81c 	bl	8000b7c <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d904      	bls.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b4e:	2313      	movs	r3, #19
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
        break;
 8001b56:	e005      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b64:	2313      	movs	r3, #19
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d154      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b6e:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b72:	23c0      	movs	r3, #192	; 0xc0
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d014      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b8a:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	0249      	lsls	r1, r1, #9
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba8:	495d      	ldr	r1, [pc, #372]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d016      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe ffde 	bl	8000b7c <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc4:	e00c      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7fe ffd9 	bl	8000b7c <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d904      	bls.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001bd6:	2313      	movs	r3, #19
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2203      	movs	r2, #3
 8001bdc:	701a      	strb	r2, [r3, #0]
            break;
 8001bde:	e004      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0ed      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bea:	2313      	movs	r3, #19
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c08:	e00c      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2213      	movs	r2, #19
 8001c10:	18ba      	adds	r2, r7, r2
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e005      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2213      	movs	r2, #19
 8001c1e:	18ba      	adds	r2, r7, r2
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c24:	2311      	movs	r3, #17
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c34:	493c      	ldr	r1, [pc, #240]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c36:	400a      	ands	r2, r1
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4013      	ands	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	220c      	movs	r2, #12
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	01db      	lsls	r3, r3, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d015      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	0899      	lsrs	r1, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0249      	lsls	r1, r1, #9
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	01db      	lsls	r3, r3, #7
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d06:	2312      	movs	r3, #18
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b006      	add	sp, #24
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	fffffcff 	.word	0xfffffcff
 8001d20:	fffeffff 	.word	0xfffeffff
 8001d24:	00001388 	.word	0x00001388
 8001d28:	efffffff 	.word	0xefffffff
 8001d2c:	ffffcfff 	.word	0xffffcfff
 8001d30:	ffff3fff 	.word	0xffff3fff

08001d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e04a      	b.n	8001ddc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223d      	movs	r2, #61	; 0x3d
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	223c      	movs	r2, #60	; 0x3c
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f841 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223d      	movs	r2, #61	; 0x3d
 8001d66:	2102      	movs	r1, #2
 8001d68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	0019      	movs	r1, r3
 8001d74:	0010      	movs	r0, r2
 8001d76:	f000 f9e5 	bl	8002144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2248      	movs	r2, #72	; 0x48
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223e      	movs	r2, #62	; 0x3e
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	223f      	movs	r2, #63	; 0x3f
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2242      	movs	r2, #66	; 0x42
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2243      	movs	r2, #67	; 0x43
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2244      	movs	r2, #68	; 0x44
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2245      	movs	r2, #69	; 0x45
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2246      	movs	r2, #70	; 0x46
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2247      	movs	r2, #71	; 0x47
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	223d      	movs	r2, #61	; 0x3d
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	223d      	movs	r2, #61	; 0x3d
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e03c      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	223d      	movs	r2, #61	; 0x3d
 8001e10:	2102      	movs	r1, #2
 8001e12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_TIM_Base_Start_IT+0x4e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_TIM_Base_Start_IT+0x4e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_TIM_Base_Start_IT+0xa4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d116      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_TIM_Base_Start_IT+0xa8>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d016      	beq.n	8001e82 <HAL_TIM_Base_Start_IT+0x8e>
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d011      	beq.n	8001e82 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e008      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e000      	b.n	8001e84 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	00010007 	.word	0x00010007

08001ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d124      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d11d      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4252      	negs	r2, r2
 8001ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2203      	movs	r2, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f916 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e007      	b.n	8001efa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f909 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f915 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d125      	bne.n	8001f5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d11e      	bne.n	8001f5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2205      	movs	r2, #5
 8001f22:	4252      	negs	r2, r2
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f8e9 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f42:	e007      	b.n	8001f54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f8dc 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f8e8 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2208      	movs	r2, #8
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d124      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2208      	movs	r2, #8
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11d      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2209      	movs	r2, #9
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f8bd 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 f8b0 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f8bc 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d125      	bne.n	800200c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d11e      	bne.n	800200c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2211      	movs	r2, #17
 8001fd4:	4252      	negs	r2, r2
 8001fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f890 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e007      	b.n	8002006 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f883 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f88f 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10f      	bne.n	800203a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	2b01      	cmp	r3, #1
 8002026:	d108      	bne.n	800203a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4252      	negs	r2, r2
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f7fe fb1b 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	4013      	ands	r3, r2
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d10f      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	4013      	ands	r3, r2
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d108      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2281      	movs	r2, #129	; 0x81
 800205c:	4252      	negs	r2, r2
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f8ec 	bl	8002240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	401a      	ands	r2, r3
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	429a      	cmp	r2, r3
 800207a:	d10e      	bne.n	800209a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	4013      	ands	r3, r2
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d107      	bne.n	800209a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_TIM_IRQHandler+0x260>)
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f8db 	bl	8002250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d10f      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d108      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2241      	movs	r2, #65	; 0x41
 80020bc:	4252      	negs	r2, r2
 80020be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f836 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2220      	movs	r2, #32
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d10f      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	4013      	ands	r3, r2
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d108      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	4252      	negs	r2, r2
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f89d 	bl	8002230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	fffffeff 	.word	0xfffffeff

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0xd0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x20>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <TIM_Base_SetConfig+0xd4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2270      	movs	r2, #112	; 0x70
 8002168:	4393      	bics	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <TIM_Base_SetConfig+0xd0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <TIM_Base_SetConfig+0xd4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <TIM_Base_SetConfig+0xd8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <TIM_Base_SetConfig+0xdc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <TIM_Base_SetConfig+0xe0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <TIM_Base_SetConfig+0xe4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <TIM_Base_SetConfig+0xe8>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	4393      	bics	r3, r2
 80021be:	001a      	movs	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <TIM_Base_SetConfig+0xd0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0xba>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <TIM_Base_SetConfig+0xdc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0xba>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <TIM_Base_SetConfig+0xe0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0xba>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <TIM_Base_SetConfig+0xe4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d103      	bne.n	8002206 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	615a      	str	r2, [r3, #20]
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40000400 	.word	0x40000400
 800221c:	40002000 	.word	0x40002000
 8002220:	40014000 	.word	0x40014000
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800
 800222c:	fffffcff 	.word	0xfffffcff

08002230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e046      	b.n	8002300 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2288      	movs	r2, #136	; 0x88
 8002276:	589b      	ldr	r3, [r3, r2]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2284      	movs	r2, #132	; 0x84
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f7fe fbbc 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2288      	movs	r2, #136	; 0x88
 8002290:	2124      	movs	r1, #36	; 0x24
 8002292:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	438a      	bics	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f8cc 	bl	8002444 <UART_SetConfig>
 80022ac:	0003      	movs	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e024      	b.n	8002300 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fa63 	bl	800278c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	490d      	ldr	r1, [pc, #52]	; (8002308 <HAL_UART_Init+0xa8>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	212a      	movs	r1, #42	; 0x2a
 80022e2:	438a      	bics	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 fafb 	bl	80028f4 <UART_CheckIdleState>
 80022fe:	0003      	movs	r3, r0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffffb7ff 	.word	0xffffb7ff

0800230c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2288      	movs	r2, #136	; 0x88
 8002320:	589b      	ldr	r3, [r3, r2]
 8002322:	2b20      	cmp	r3, #32
 8002324:	d000      	beq.n	8002328 <HAL_UART_Transmit+0x1c>
 8002326:	e088      	b.n	800243a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_UART_Transmit+0x2a>
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e080      	b.n	800243c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	015b      	lsls	r3, r3, #5
 8002342:	429a      	cmp	r2, r3
 8002344:	d109      	bne.n	800235a <HAL_UART_Transmit+0x4e>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d001      	beq.n	800235a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e070      	b.n	800243c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2290      	movs	r2, #144	; 0x90
 800235e:	2100      	movs	r1, #0
 8002360:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2288      	movs	r2, #136	; 0x88
 8002366:	2121      	movs	r1, #33	; 0x21
 8002368:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800236a:	f7fe fc07 	bl	8000b7c <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1dba      	adds	r2, r7, #6
 8002376:	2154      	movs	r1, #84	; 0x54
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1dba      	adds	r2, r7, #6
 8002380:	2156      	movs	r1, #86	; 0x56
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	015b      	lsls	r3, r3, #5
 800238e:	429a      	cmp	r2, r3
 8002390:	d108      	bne.n	80023a4 <HAL_UART_Transmit+0x98>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e003      	b.n	80023ac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023ac:	e02c      	b.n	8002408 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	0013      	movs	r3, r2
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	f000 fae8 	bl	8002990 <UART_WaitOnFlagUntilTimeout>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e039      	b.n	800243c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	001a      	movs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	05d2      	lsls	r2, r2, #23
 80023da:	0dd2      	lsrs	r2, r2, #23
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3302      	adds	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e007      	b.n	80023f6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3301      	adds	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2256      	movs	r2, #86	; 0x56
 80023fa:	5a9b      	ldrh	r3, [r3, r2]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b299      	uxth	r1, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2256      	movs	r2, #86	; 0x56
 8002406:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2256      	movs	r2, #86	; 0x56
 800240c:	5a9b      	ldrh	r3, [r3, r2]
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1cc      	bne.n	80023ae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	0013      	movs	r3, r2
 800241e:	2200      	movs	r2, #0
 8002420:	2140      	movs	r1, #64	; 0x40
 8002422:	f000 fab5 	bl	8002990 <UART_WaitOnFlagUntilTimeout>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e006      	b.n	800243c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2288      	movs	r2, #136	; 0x88
 8002432:	2120      	movs	r1, #32
 8002434:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b008      	add	sp, #32
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800244c:	231a      	movs	r3, #26
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4313      	orrs	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4abc      	ldr	r2, [pc, #752]	; (8002764 <UART_SetConfig+0x320>)
 8002474:	4013      	ands	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4ab7      	ldr	r2, [pc, #732]	; (8002768 <UART_SetConfig+0x324>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4aae      	ldr	r2, [pc, #696]	; (800276c <UART_SetConfig+0x328>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	220f      	movs	r2, #15
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4aa4      	ldr	r2, [pc, #656]	; (8002770 <UART_SetConfig+0x32c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d127      	bne.n	8002532 <UART_SetConfig+0xee>
 80024e2:	4ba4      	ldr	r3, [pc, #656]	; (8002774 <UART_SetConfig+0x330>)
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	2203      	movs	r2, #3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d017      	beq.n	800251e <UART_SetConfig+0xda>
 80024ee:	d81b      	bhi.n	8002528 <UART_SetConfig+0xe4>
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d00a      	beq.n	800250a <UART_SetConfig+0xc6>
 80024f4:	d818      	bhi.n	8002528 <UART_SetConfig+0xe4>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <UART_SetConfig+0xbc>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d00a      	beq.n	8002514 <UART_SetConfig+0xd0>
 80024fe:	e013      	b.n	8002528 <UART_SetConfig+0xe4>
 8002500:	231b      	movs	r3, #27
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e058      	b.n	80025bc <UART_SetConfig+0x178>
 800250a:	231b      	movs	r3, #27
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2202      	movs	r2, #2
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e053      	b.n	80025bc <UART_SetConfig+0x178>
 8002514:	231b      	movs	r3, #27
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2204      	movs	r2, #4
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e04e      	b.n	80025bc <UART_SetConfig+0x178>
 800251e:	231b      	movs	r3, #27
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2208      	movs	r2, #8
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e049      	b.n	80025bc <UART_SetConfig+0x178>
 8002528:	231b      	movs	r3, #27
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2210      	movs	r2, #16
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e044      	b.n	80025bc <UART_SetConfig+0x178>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a90      	ldr	r2, [pc, #576]	; (8002778 <UART_SetConfig+0x334>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d127      	bne.n	800258c <UART_SetConfig+0x148>
 800253c:	4b8d      	ldr	r3, [pc, #564]	; (8002774 <UART_SetConfig+0x330>)
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	220c      	movs	r2, #12
 8002542:	4013      	ands	r3, r2
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d017      	beq.n	8002578 <UART_SetConfig+0x134>
 8002548:	d81b      	bhi.n	8002582 <UART_SetConfig+0x13e>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d00a      	beq.n	8002564 <UART_SetConfig+0x120>
 800254e:	d818      	bhi.n	8002582 <UART_SetConfig+0x13e>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <UART_SetConfig+0x116>
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00a      	beq.n	800256e <UART_SetConfig+0x12a>
 8002558:	e013      	b.n	8002582 <UART_SetConfig+0x13e>
 800255a:	231b      	movs	r3, #27
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e02b      	b.n	80025bc <UART_SetConfig+0x178>
 8002564:	231b      	movs	r3, #27
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e026      	b.n	80025bc <UART_SetConfig+0x178>
 800256e:	231b      	movs	r3, #27
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2204      	movs	r2, #4
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e021      	b.n	80025bc <UART_SetConfig+0x178>
 8002578:	231b      	movs	r3, #27
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2208      	movs	r2, #8
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e01c      	b.n	80025bc <UART_SetConfig+0x178>
 8002582:	231b      	movs	r3, #27
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2210      	movs	r2, #16
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e017      	b.n	80025bc <UART_SetConfig+0x178>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a7a      	ldr	r2, [pc, #488]	; (800277c <UART_SetConfig+0x338>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d104      	bne.n	80025a0 <UART_SetConfig+0x15c>
 8002596:	231b      	movs	r3, #27
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e00d      	b.n	80025bc <UART_SetConfig+0x178>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a76      	ldr	r2, [pc, #472]	; (8002780 <UART_SetConfig+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d104      	bne.n	80025b4 <UART_SetConfig+0x170>
 80025aa:	231b      	movs	r3, #27
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e003      	b.n	80025bc <UART_SetConfig+0x178>
 80025b4:	231b      	movs	r3, #27
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2210      	movs	r2, #16
 80025ba:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d000      	beq.n	80025ca <UART_SetConfig+0x186>
 80025c8:	e065      	b.n	8002696 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80025ca:	231b      	movs	r3, #27
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d015      	beq.n	8002600 <UART_SetConfig+0x1bc>
 80025d4:	dc18      	bgt.n	8002608 <UART_SetConfig+0x1c4>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00d      	beq.n	80025f6 <UART_SetConfig+0x1b2>
 80025da:	dc15      	bgt.n	8002608 <UART_SetConfig+0x1c4>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <UART_SetConfig+0x1a2>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d005      	beq.n	80025f0 <UART_SetConfig+0x1ac>
 80025e4:	e010      	b.n	8002608 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025e6:	f7ff fa31 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 80025ea:	0003      	movs	r3, r0
 80025ec:	617b      	str	r3, [r7, #20]
        break;
 80025ee:	e012      	b.n	8002616 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <UART_SetConfig+0x340>)
 80025f2:	617b      	str	r3, [r7, #20]
        break;
 80025f4:	e00f      	b.n	8002616 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025f6:	f7ff f99d 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80025fa:	0003      	movs	r3, r0
 80025fc:	617b      	str	r3, [r7, #20]
        break;
 80025fe:	e00a      	b.n	8002616 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	617b      	str	r3, [r7, #20]
        break;
 8002606:	e006      	b.n	8002616 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800260c:	231a      	movs	r3, #26
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
        break;
 8002614:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d100      	bne.n	800261e <UART_SetConfig+0x1da>
 800261c:	e08d      	b.n	800273a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002622:	4b59      	ldr	r3, [pc, #356]	; (8002788 <UART_SetConfig+0x344>)
 8002624:	0052      	lsls	r2, r2, #1
 8002626:	5ad3      	ldrh	r3, [r2, r3]
 8002628:	0019      	movs	r1, r3
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7fd fd6c 	bl	8000108 <__udivsi3>
 8002630:	0003      	movs	r3, r0
 8002632:	005a      	lsls	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	18d2      	adds	r2, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0019      	movs	r1, r3
 8002642:	0010      	movs	r0, r2
 8002644:	f7fd fd60 	bl	8000108 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	d91c      	bls.n	800268c <UART_SetConfig+0x248>
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	429a      	cmp	r2, r3
 800265a:	d217      	bcs.n	800268c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	b29a      	uxth	r2, r3
 8002660:	200e      	movs	r0, #14
 8002662:	183b      	adds	r3, r7, r0
 8002664:	210f      	movs	r1, #15
 8002666:	438a      	bics	r2, r1
 8002668:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	b299      	uxth	r1, r3
 8002676:	183b      	adds	r3, r7, r0
 8002678:	183a      	adds	r2, r7, r0
 800267a:	8812      	ldrh	r2, [r2, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	183a      	adds	r2, r7, r0
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	e056      	b.n	800273a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800268c:	231a      	movs	r3, #26
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e051      	b.n	800273a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002696:	231b      	movs	r3, #27
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d015      	beq.n	80026cc <UART_SetConfig+0x288>
 80026a0:	dc18      	bgt.n	80026d4 <UART_SetConfig+0x290>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00d      	beq.n	80026c2 <UART_SetConfig+0x27e>
 80026a6:	dc15      	bgt.n	80026d4 <UART_SetConfig+0x290>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <UART_SetConfig+0x26e>
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d005      	beq.n	80026bc <UART_SetConfig+0x278>
 80026b0:	e010      	b.n	80026d4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026b2:	f7ff f9cb 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 80026b6:	0003      	movs	r3, r0
 80026b8:	617b      	str	r3, [r7, #20]
        break;
 80026ba:	e012      	b.n	80026e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <UART_SetConfig+0x340>)
 80026be:	617b      	str	r3, [r7, #20]
        break;
 80026c0:	e00f      	b.n	80026e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff f937 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80026c6:	0003      	movs	r3, r0
 80026c8:	617b      	str	r3, [r7, #20]
        break;
 80026ca:	e00a      	b.n	80026e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	617b      	str	r3, [r7, #20]
        break;
 80026d2:	e006      	b.n	80026e2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026d8:	231a      	movs	r3, #26
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
        break;
 80026e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d028      	beq.n	800273a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <UART_SetConfig+0x344>)
 80026ee:	0052      	lsls	r2, r2, #1
 80026f0:	5ad3      	ldrh	r3, [r2, r3]
 80026f2:	0019      	movs	r1, r3
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7fd fd07 	bl	8000108 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	18d2      	adds	r2, r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f7fd fcfb 	bl	8000108 <__udivsi3>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d90a      	bls.n	8002732 <UART_SetConfig+0x2ee>
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	429a      	cmp	r2, r3
 8002724:	d205      	bcs.n	8002732 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e003      	b.n	800273a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002732:	231a      	movs	r3, #26
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	226a      	movs	r2, #106	; 0x6a
 800273e:	2101      	movs	r1, #1
 8002740:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2268      	movs	r2, #104	; 0x68
 8002746:	2101      	movs	r1, #1
 8002748:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002756:	231a      	movs	r3, #26
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b008      	add	sp, #32
 8002762:	bd80      	pop	{r7, pc}
 8002764:	cfff69f3 	.word	0xcfff69f3
 8002768:	ffffcfff 	.word	0xffffcfff
 800276c:	11fff4ff 	.word	0x11fff4ff
 8002770:	40013800 	.word	0x40013800
 8002774:	40021000 	.word	0x40021000
 8002778:	40004400 	.word	0x40004400
 800277c:	40004800 	.word	0x40004800
 8002780:	40004c00 	.word	0x40004c00
 8002784:	00f42400 	.word	0x00f42400
 8002788:	08005814 	.word	0x08005814

0800278c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d00b      	beq.n	80027b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <UART_AdvFeatureConfig+0x144>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d00b      	beq.n	80027d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <UART_AdvFeatureConfig+0x148>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2204      	movs	r2, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d00b      	beq.n	80027fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <UART_AdvFeatureConfig+0x14c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2208      	movs	r2, #8
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a34      	ldr	r2, [pc, #208]	; (80028dc <UART_AdvFeatureConfig+0x150>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	2210      	movs	r2, #16
 8002822:	4013      	ands	r3, r2
 8002824:	d00b      	beq.n	800283e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <UART_AdvFeatureConfig+0x154>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	d00b      	beq.n	8002860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <UART_AdvFeatureConfig+0x158>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2240      	movs	r2, #64	; 0x40
 8002866:	4013      	ands	r3, r2
 8002868:	d01d      	beq.n	80028a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <UART_AdvFeatureConfig+0x15c>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	035b      	lsls	r3, r3, #13
 800288a:	429a      	cmp	r2, r3
 800288c:	d10b      	bne.n	80028a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <UART_AdvFeatureConfig+0x160>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	4013      	ands	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <UART_AdvFeatureConfig+0x164>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	fffdffff 	.word	0xfffdffff
 80028d4:	fffeffff 	.word	0xfffeffff
 80028d8:	fffbffff 	.word	0xfffbffff
 80028dc:	ffff7fff 	.word	0xffff7fff
 80028e0:	ffffefff 	.word	0xffffefff
 80028e4:	ffffdfff 	.word	0xffffdfff
 80028e8:	ffefffff 	.word	0xffefffff
 80028ec:	ff9fffff 	.word	0xff9fffff
 80028f0:	fff7ffff 	.word	0xfff7ffff

080028f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2290      	movs	r2, #144	; 0x90
 8002900:	2100      	movs	r1, #0
 8002902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002904:	f7fe f93a 	bl	8000b7c <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2208      	movs	r2, #8
 8002914:	4013      	ands	r3, r2
 8002916:	2b08      	cmp	r3, #8
 8002918:	d10c      	bne.n	8002934 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	0391      	lsls	r1, r2, #14
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <UART_CheckIdleState+0x98>)
 8002924:	9200      	str	r2, [sp, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	f000 f832 	bl	8002990 <UART_WaitOnFlagUntilTimeout>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d001      	beq.n	8002934 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e026      	b.n	8002982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	2b04      	cmp	r3, #4
 8002940:	d10c      	bne.n	800295c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	03d1      	lsls	r1, r2, #15
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <UART_CheckIdleState+0x98>)
 800294c:	9200      	str	r2, [sp, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	f000 f81e 	bl	8002990 <UART_WaitOnFlagUntilTimeout>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d001      	beq.n	800295c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e012      	b.n	8002982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2288      	movs	r2, #136	; 0x88
 8002960:	2120      	movs	r1, #32
 8002962:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	228c      	movs	r2, #140	; 0x8c
 8002968:	2120      	movs	r1, #32
 800296a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2284      	movs	r2, #132	; 0x84
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	01ffffff 	.word	0x01ffffff

08002990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b094      	sub	sp, #80	; 0x50
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a0:	e0a7      	b.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a4:	3301      	adds	r3, #1
 80029a6:	d100      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80029a8:	e0a3      	b.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe f8e7 	bl	8000b7c <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d13f      	bne.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c0:	f3ef 8310 	mrs	r3, PRIMASK
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	494e      	ldr	r1, [pc, #312]	; (8002b1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	f383 8810 	msr	PRIMASK, r3
}
 80029f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
 80029fc:	2301      	movs	r3, #1
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	f383 8810 	msr	PRIMASK, r3
}
 8002a22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2288      	movs	r2, #136	; 0x88
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	228c      	movs	r2, #140	; 0x8c
 8002a30:	2120      	movs	r1, #32
 8002a32:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2284      	movs	r2, #132	; 0x84
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e069      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2204      	movs	r2, #4
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d052      	beq.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	401a      	ands	r2, r3
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d148      	bne.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6e:	613b      	str	r3, [r7, #16]
  return(result);
 8002a70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4924      	ldr	r1, [pc, #144]	; (8002b1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f383 8810 	msr	PRIMASK, r3
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f383 8810 	msr	PRIMASK, r3
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	438a      	bics	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f383 8810 	msr	PRIMASK, r3
}
 8002acc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2288      	movs	r2, #136	; 0x88
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	228c      	movs	r2, #140	; 0x8c
 8002ada:	2120      	movs	r1, #32
 8002adc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2290      	movs	r2, #144	; 0x90
 8002ae2:	2120      	movs	r1, #32
 8002ae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2284      	movs	r2, #132	; 0x84
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e010      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	425a      	negs	r2, r3
 8002b02:	4153      	adcs	r3, r2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	001a      	movs	r2, r3
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d100      	bne.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x182>
 8002b10:	e747      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b014      	add	sp, #80	; 0x50
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	fffffe5f 	.word	0xfffffe5f

08002b20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2284      	movs	r2, #132	; 0x84
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e027      	b.n	8002b86 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2284      	movs	r2, #132	; 0x84
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2288      	movs	r2, #136	; 0x88
 8002b42:	2124      	movs	r1, #36	; 0x24
 8002b44:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2288      	movs	r2, #136	; 0x88
 8002b78:	2120      	movs	r1, #32
 8002b7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2284      	movs	r2, #132	; 0x84
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	dfffffff 	.word	0xdfffffff

08002b94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2284      	movs	r2, #132	; 0x84
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e02e      	b.n	8002c0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2284      	movs	r2, #132	; 0x84
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2288      	movs	r2, #136	; 0x88
 8002bb8:	2124      	movs	r1, #36	; 0x24
 8002bba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	08d9      	lsrs	r1, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 f854 	bl	8002c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2288      	movs	r2, #136	; 0x88
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2284      	movs	r2, #132	; 0x84
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2284      	movs	r2, #132	; 0x84
 8002c22:	5c9b      	ldrb	r3, [r3, r2]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e02f      	b.n	8002c8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2284      	movs	r2, #132	; 0x84
 8002c30:	2101      	movs	r1, #1
 8002c32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2288      	movs	r2, #136	; 0x88
 8002c38:	2124      	movs	r1, #36	; 0x24
 8002c3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f813 	bl	8002c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2288      	movs	r2, #136	; 0x88
 8002c7e:	2120      	movs	r1, #32
 8002c80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2284      	movs	r2, #132	; 0x84
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f1ffffff 	.word	0xf1ffffff

08002c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	226a      	movs	r2, #106	; 0x6a
 8002cac:	2101      	movs	r1, #1
 8002cae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2268      	movs	r2, #104	; 0x68
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cb8:	e043      	b.n	8002d42 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cba:	260f      	movs	r6, #15
 8002cbc:	19bb      	adds	r3, r7, r6
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002cc2:	200e      	movs	r0, #14
 8002cc4:	183b      	adds	r3, r7, r0
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	0e5b      	lsrs	r3, r3, #25
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	240d      	movs	r4, #13
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	2107      	movs	r1, #7
 8002cda:	400a      	ands	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	0f5b      	lsrs	r3, r3, #29
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	250c      	movs	r5, #12
 8002cea:	197b      	adds	r3, r7, r5
 8002cec:	2107      	movs	r1, #7
 8002cee:	400a      	ands	r2, r1
 8002cf0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002cf2:	183b      	adds	r3, r7, r0
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	197a      	adds	r2, r7, r5
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	4914      	ldr	r1, [pc, #80]	; (8002d4c <UARTEx_SetNbDataToProcess+0xb4>)
 8002cfc:	5c8a      	ldrb	r2, [r1, r2]
 8002cfe:	435a      	muls	r2, r3
 8002d00:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d02:	197b      	adds	r3, r7, r5
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	f7fd fa86 	bl	800021c <__divsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	b299      	uxth	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	226a      	movs	r2, #106	; 0x6a
 8002d18:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d1a:	19bb      	adds	r3, r7, r6
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	193a      	adds	r2, r7, r4
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	490a      	ldr	r1, [pc, #40]	; (8002d4c <UARTEx_SetNbDataToProcess+0xb4>)
 8002d24:	5c8a      	ldrb	r2, [r1, r2]
 8002d26:	435a      	muls	r2, r3
 8002d28:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d32:	0019      	movs	r1, r3
 8002d34:	f7fd fa72 	bl	800021c <__divsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2268      	movs	r2, #104	; 0x68
 8002d40:	5299      	strh	r1, [r3, r2]
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b005      	add	sp, #20
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	0800582c 	.word	0x0800582c
 8002d50:	08005834 	.word	0x08005834

08002d54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	2200      	movs	r2, #0
 8002d68:	5e9b      	ldrsh	r3, [r3, r2]
 8002d6a:	2b84      	cmp	r3, #132	; 0x84
 8002d6c:	d006      	beq.n	8002d7c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	5e9a      	ldrsh	r2, [r3, r2]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	3303      	adds	r3, #3
 8002d7a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8c:	f3ef 8305 	mrs	r3, IPSR
 8002d90:	607b      	str	r3, [r7, #4]
  return(result);
 8002d92:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	4193      	sbcs	r3, r2
 8002d98:	b2db      	uxtb	r3, r3
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002da6:	f000 ff27 	bl	8003bf8 <vTaskStartScheduler>
  
  return osOK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685c      	ldr	r4, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dc8:	b29e      	uxth	r6, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff ffbf 	bl	8002d54 <makeFreeRtosPriority>
 8002dd6:	0001      	movs	r1, r0
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	230c      	movs	r3, #12
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	9100      	str	r1, [sp, #0]
 8002de2:	0013      	movs	r3, r2
 8002de4:	0032      	movs	r2, r6
 8002de6:	0029      	movs	r1, r5
 8002de8:	0020      	movs	r0, r4
 8002dea:	f000 fdb1 	bl	8003950 <xTaskCreate>
 8002dee:	0003      	movs	r3, r0
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b005      	add	sp, #20
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <osDelay+0x16>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	e000      	b.n	8002e1a <osDelay+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 fec6 	bl	8003bac <vTaskDelay>
  
  return osOK;
 8002e20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b004      	add	sp, #16
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d111      	bne.n	8002e5e <osSemaphoreCreate+0x34>
    vSemaphoreCreateBinary(sema);
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f000 f99d 	bl	800317e <xQueueGenericCreate>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <osSemaphoreCreate+0x30>
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	2300      	movs	r3, #0
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	f000 f9e2 	bl	800321e <xQueueGenericSend>
    return sema;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	e000      	b.n	8002e60 <osSemaphoreCreate+0x36>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8002e5e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	e036      	b.n	8002eee <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	d103      	bne.n	8002e92 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e009      	b.n	8002ea6 <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <osSemaphoreWait+0x3e>
      ticks = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002ea6:	f7ff ff6e 	bl	8002d86 <inHandlerMode>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d013      	beq.n	8002ed6 <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002eae:	2308      	movs	r3, #8
 8002eb0:	18fa      	adds	r2, r7, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fbb4 	bl	8003624 <xQueueReceiveFromISR>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <osSemaphoreWait+0x5e>
      return osErrorOS;
 8002ec2:	23ff      	movs	r3, #255	; 0xff
 8002ec4:	e013      	b.n	8002eee <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00f      	beq.n	8002eec <osSemaphoreWait+0x84>
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <osSemaphoreWait+0x90>)
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e00a      	b.n	8002eec <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fac7 	bl	8003470 <xQueueSemaphoreTake>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <osSemaphoreWait+0x84>
    return osErrorOS;
 8002ee8:	23ff      	movs	r3, #255	; 0xff
 8002eea:	e000      	b.n	8002eee <osSemaphoreWait+0x86>
  }
  
  return osOK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	e000ed04 	.word	0xe000ed04

08002efc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002f0c:	f7ff ff3b 	bl	8002d86 <inHandlerMode>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d013      	beq.n	8002f3c <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002f14:	2308      	movs	r3, #8
 8002f16:	18fa      	adds	r2, r7, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fa42 	bl	80033a6 <xQueueGiveFromISR>
 8002f22:	0003      	movs	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002f28:	23ff      	movs	r3, #255	; 0xff
 8002f2a:	e013      	b.n	8002f54 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00f      	beq.n	8002f52 <osSemaphoreRelease+0x56>
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <osSemaphoreRelease+0x60>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0552      	lsls	r2, r2, #21
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00a      	b.n	8002f52 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	f000 f96b 	bl	800321e <xQueueGenericSend>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d001      	beq.n	8002f52 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8002f4e:	23ff      	movs	r3, #255	; 0xff
 8002f50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	0019      	movs	r1, r3
 8002f76:	f000 f902 	bl	800317e <xQueueGenericCreate>
 8002f7a:	0003      	movs	r3, r0
#endif
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3308      	adds	r3, #8
 8002f90:	001a      	movs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4252      	negs	r2, r2
 8002f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3308      	adds	r3, #8
 8002fac:	001a      	movs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}

0800301a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3301      	adds	r3, #1
 800302e:	d103      	bne.n	8003038 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e00c      	b.n	8003052 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3308      	adds	r3, #8
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e002      	b.n	8003046 <vListInsert+0x2c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d2f6      	bcs.n	8003040 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b004      	add	sp, #16
 8003084:	bd80      	pop	{r7, pc}

08003086 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6892      	ldr	r2, [r2, #8]
 800309c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6852      	ldr	r2, [r2, #4]
 80030a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d103      	bne.n	80030ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueGenericReset+0x18>
 80030ea:	b672      	cpsid	i
 80030ec:	e7fe      	b.n	80030ec <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80030ee:	f001 fb3f 	bl	8004770 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	434b      	muls	r3, r1
 8003100:	18d2      	adds	r2, r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	1e59      	subs	r1, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	434b      	muls	r3, r1
 8003124:	18d2      	adds	r2, r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2244      	movs	r2, #68	; 0x44
 800312e:	21ff      	movs	r1, #255	; 0xff
 8003130:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2245      	movs	r2, #69	; 0x45
 8003136:	21ff      	movs	r1, #255	; 0xff
 8003138:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3310      	adds	r3, #16
 800314c:	0018      	movs	r0, r3
 800314e:	f000 ff41 	bl	8003fd4 <xTaskRemoveFromEventList>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d00c      	beq.n	8003170 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003156:	f001 fafb 	bl	8004750 <vPortYield>
 800315a:	e009      	b.n	8003170 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3310      	adds	r3, #16
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ff0f 	bl	8002f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3324      	adds	r3, #36	; 0x24
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff ff0a 	bl	8002f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003170:	f001 fb10 	bl	8004794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003174:	2301      	movs	r3, #1
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}

0800317e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b08b      	sub	sp, #44	; 0x2c
 8003182:	af02      	add	r7, sp, #8
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueGenericCreate+0x18>
 8003192:	b672      	cpsid	i
 8003194:	e7fe      	b.n	8003194 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4353      	muls	r3, r2
 800319c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3348      	adds	r3, #72	; 0x48
 80031a2:	0018      	movs	r0, r3
 80031a4:	f001 fb7c 	bl	80048a0 <pvPortMalloc>
 80031a8:	0003      	movs	r3, r0
 80031aa:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3348      	adds	r3, #72	; 0x48
 80031ba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	781c      	ldrb	r4, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	0023      	movs	r3, r4
 80031cc:	f000 f805 	bl	80031da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031d0:	69bb      	ldr	r3, [r7, #24]
	}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b009      	add	sp, #36	; 0x24
 80031d8:	bd90      	pop	{r4, r7, pc}

080031da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	001a      	movs	r2, r3
 80031e8:	1cfb      	adds	r3, r7, #3
 80031ea:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e002      	b.n	8003200 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2101      	movs	r1, #1
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff ff60 	bl	80030d6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}

0800321e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	; 0x28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueGenericSend+0x20>
 800323a:	b672      	cpsid	i
 800323c:	e7fe      	b.n	800323c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueGenericSend+0x2e>
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueGenericSend+0x32>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueGenericSend+0x34>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <xQueueGenericSend+0x3c>
 8003256:	b672      	cpsid	i
 8003258:	e7fe      	b.n	8003258 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d103      	bne.n	8003268 <xQueueGenericSend+0x4a>
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <xQueueGenericSend+0x4e>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <xQueueGenericSend+0x50>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <xQueueGenericSend+0x58>
 8003272:	b672      	cpsid	i
 8003274:	e7fe      	b.n	8003274 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003276:	f001 f829 	bl	80042cc <xTaskGetSchedulerState>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d102      	bne.n	8003284 <xQueueGenericSend+0x66>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueGenericSend+0x6a>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueGenericSend+0x6c>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <xQueueGenericSend+0x74>
 800328e:	b672      	cpsid	i
 8003290:	e7fe      	b.n	8003290 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003292:	f001 fa6d 	bl	8004770 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <xQueueGenericSend+0x8a>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11e      	bne.n	80032e6 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fa31 	bl	8003716 <prvCopyDataToQueue>
 80032b4:	0003      	movs	r3, r0
 80032b6:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	3324      	adds	r3, #36	; 0x24
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 fe85 	bl	8003fd4 <xTaskRemoveFromEventList>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d007      	beq.n	80032de <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032ce:	f001 fa3f 	bl	8004750 <vPortYield>
 80032d2:	e004      	b.n	80032de <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032da:	f001 fa39 	bl	8004750 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032de:	f001 fa59 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e05b      	b.n	800339e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ec:	f001 fa52 	bl	8004794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e054      	b.n	800339e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032fa:	2314      	movs	r3, #20
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fec4 	bl	800408c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003308:	f001 fa44 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800330c:	f000 fcaa 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003310:	f001 fa2e 	bl	8004770 <vPortEnterCritical>
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2244      	movs	r2, #68	; 0x44
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	b25b      	sxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	d103      	bne.n	8003328 <xQueueGenericSend+0x10a>
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2244      	movs	r2, #68	; 0x44
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2245      	movs	r2, #69	; 0x45
 800332c:	5c9b      	ldrb	r3, [r3, r2]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	d103      	bne.n	800333c <xQueueGenericSend+0x11e>
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2245      	movs	r2, #69	; 0x45
 8003338:	2100      	movs	r1, #0
 800333a:	5499      	strb	r1, [r3, r2]
 800333c:	f001 fa2a 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	2314      	movs	r3, #20
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 feb3 	bl	80040b4 <xTaskCheckForTimeOut>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d11e      	bne.n	8003390 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 fae3 	bl	8003920 <prvIsQueueFull>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d011      	beq.n	8003382 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	3310      	adds	r3, #16
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fe16 	bl	8003f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fa62 	bl	8003838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003374:	f000 fc82 	bl	8003c7c <xTaskResumeAll>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d18a      	bne.n	8003292 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800337c:	f001 f9e8 	bl	8004750 <vPortYield>
 8003380:	e787      	b.n	8003292 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fa57 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800338a:	f000 fc77 	bl	8003c7c <xTaskResumeAll>
 800338e:	e780      	b.n	8003292 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fa50 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003398:	f000 fc70 	bl	8003c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800339c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b00a      	add	sp, #40	; 0x28
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b088      	sub	sp, #32
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <xQueueGiveFromISR+0x18>
 80033ba:	b672      	cpsid	i
 80033bc:	e7fe      	b.n	80033bc <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <xQueueGiveFromISR+0x24>
 80033c6:	b672      	cpsid	i
 80033c8:	e7fe      	b.n	80033c8 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <xQueueGiveFromISR+0x34>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <xQueueGiveFromISR+0x38>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGiveFromISR+0x3a>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <xQueueGiveFromISR+0x42>
 80033e4:	b672      	cpsid	i
 80033e6:	e7fe      	b.n	80033e6 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033e8:	f001 f9ec 	bl	80047c4 <ulSetInterruptMaskFromISR>
 80033ec:	0003      	movs	r3, r0
 80033ee:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d22c      	bcs.n	800345a <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003400:	200f      	movs	r0, #15
 8003402:	183b      	adds	r3, r7, r0
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	2145      	movs	r1, #69	; 0x45
 8003408:	5c52      	ldrb	r2, [r2, r1]
 800340a:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003414:	183b      	adds	r3, r7, r0
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b25b      	sxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	d111      	bne.n	8003442 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	0018      	movs	r0, r3
 800342c:	f000 fdd2 	bl	8003fd4 <xTaskRemoveFromEventList>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d00f      	beq.n	8003454 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e008      	b.n	8003454 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003442:	230f      	movs	r3, #15
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	b259      	sxtb	r1, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2245      	movs	r2, #69	; 0x45
 8003452:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e001      	b.n	800345e <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0018      	movs	r0, r3
 8003462:	f001 f9b5 	bl	80047d0 <vClearInterruptMaskFromISR>

	return xReturn;
 8003466:	69fb      	ldr	r3, [r7, #28]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b008      	add	sp, #32
 800346e:	bd80      	pop	{r7, pc}

08003470 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <xQueueSemaphoreTake+0x20>
 800348c:	b672      	cpsid	i
 800348e:	e7fe      	b.n	800348e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <xQueueSemaphoreTake+0x2c>
 8003498:	b672      	cpsid	i
 800349a:	e7fe      	b.n	800349a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800349c:	f000 ff16 	bl	80042cc <xTaskGetSchedulerState>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d102      	bne.n	80034aa <xQueueSemaphoreTake+0x3a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <xQueueSemaphoreTake+0x3e>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <xQueueSemaphoreTake+0x40>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <xQueueSemaphoreTake+0x48>
 80034b4:	b672      	cpsid	i
 80034b6:	e7fe      	b.n	80034b6 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034b8:	f001 f95a 	bl	8004770 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01d      	beq.n	8003504 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034d8:	f001 f848 	bl	800456c <pvTaskIncrementMutexHeldCount>
 80034dc:	0002      	movs	r2, r0
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3310      	adds	r3, #16
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fd70 	bl	8003fd4 <xTaskRemoveFromEventList>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034f8:	f001 f92a 	bl	8004750 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034fc:	f001 f94a 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 8003500:	2301      	movs	r3, #1
 8003502:	e08b      	b.n	800361c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <xQueueSemaphoreTake+0xa4>
 8003510:	b672      	cpsid	i
 8003512:	e7fe      	b.n	8003512 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003514:	f001 f93e 	bl	8004794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003518:	2300      	movs	r3, #0
 800351a:	e07f      	b.n	800361c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003522:	230c      	movs	r3, #12
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fdb0 	bl	800408c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800352c:	2301      	movs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003530:	f001 f930 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003534:	f000 fb96 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003538:	f001 f91a 	bl	8004770 <vPortEnterCritical>
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2244      	movs	r2, #68	; 0x44
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	d103      	bne.n	8003550 <xQueueSemaphoreTake+0xe0>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2244      	movs	r2, #68	; 0x44
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2245      	movs	r2, #69	; 0x45
 8003554:	5c9b      	ldrb	r3, [r3, r2]
 8003556:	b25b      	sxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	d103      	bne.n	8003564 <xQueueSemaphoreTake+0xf4>
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2245      	movs	r2, #69	; 0x45
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]
 8003564:	f001 f916 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003568:	003a      	movs	r2, r7
 800356a:	230c      	movs	r3, #12
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	0011      	movs	r1, r2
 8003570:	0018      	movs	r0, r3
 8003572:	f000 fd9f 	bl	80040b4 <xTaskCheckForTimeOut>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d12e      	bne.n	80035d8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f9b9 	bl	80038f4 <prvIsQueueEmpty>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d021      	beq.n	80035ca <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800358e:	f001 f8ef 	bl	8004770 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 feb4 	bl	8004304 <xTaskPriorityInherit>
 800359c:	0003      	movs	r3, r0
 800359e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80035a0:	f001 f8f8 	bl	8004794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	0011      	movs	r1, r2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 fcf3 	bl	8003f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f93f 	bl	8003838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035ba:	f000 fb5f 	bl	8003c7c <xTaskResumeAll>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d000      	beq.n	80035c4 <xQueueSemaphoreTake+0x154>
 80035c2:	e779      	b.n	80034b8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80035c4:	f001 f8c4 	bl	8004750 <vPortYield>
 80035c8:	e776      	b.n	80034b8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f933 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d2:	f000 fb53 	bl	8003c7c <xTaskResumeAll>
 80035d6:	e76f      	b.n	80034b8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f92c 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e0:	f000 fb4c 	bl	8003c7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f984 	bl	80038f4 <prvIsQueueEmpty>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d100      	bne.n	80035f2 <xQueueSemaphoreTake+0x182>
 80035f0:	e762      	b.n	80034b8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80035f8:	f001 f8ba 	bl	8004770 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 f873 	bl	80036ea <prvGetDisinheritPriorityAfterTimeout>
 8003604:	0003      	movs	r3, r0
 8003606:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f000 ff3b 	bl	800448c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003616:	f001 f8bd 	bl	8004794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800361a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b00a      	add	sp, #40	; 0x28
 8003622:	bd80      	pop	{r7, pc}

08003624 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <xQueueReceiveFromISR+0x1a>
 800363a:	b672      	cpsid	i
 800363c:	e7fe      	b.n	800363c <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <xQueueReceiveFromISR+0x28>
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <xQueueReceiveFromISR+0x2c>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <xQueueReceiveFromISR+0x2e>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <xQueueReceiveFromISR+0x36>
 8003656:	b672      	cpsid	i
 8003658:	e7fe      	b.n	8003658 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800365a:	f001 f8b3 	bl	80047c4 <ulSetInterruptMaskFromISR>
 800365e:	0003      	movs	r3, r0
 8003660:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d032      	beq.n	80036d4 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800366e:	2417      	movs	r4, #23
 8003670:	193b      	adds	r3, r7, r4
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	2144      	movs	r1, #68	; 0x44
 8003676:	5c52      	ldrb	r2, [r2, r1]
 8003678:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f8b3 	bl	80037ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800368e:	193b      	adds	r3, r7, r4
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b25b      	sxtb	r3, r3
 8003694:	3301      	adds	r3, #1
 8003696:	d111      	bne.n	80036bc <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	3310      	adds	r3, #16
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fc95 	bl	8003fd4 <xTaskRemoveFromEventList>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d00f      	beq.n	80036ce <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00c      	beq.n	80036ce <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e008      	b.n	80036ce <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036bc:	2317      	movs	r3, #23
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	b259      	sxtb	r1, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2244      	movs	r2, #68	; 0x44
 80036cc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e001      	b.n	80036d8 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	0018      	movs	r0, r3
 80036dc:	f001 f878 	bl	80047d0 <vClearInterruptMaskFromISR>

	return xReturn;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b00b      	add	sp, #44	; 0x2c
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2207      	movs	r2, #7
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e001      	b.n	800370c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800370c:	68fb      	ldr	r3, [r7, #12]
	}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}

08003716 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10e      	bne.n	8003752 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d14e      	bne.n	80037da <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fe47 	bl	80043d4 <xTaskPriorityDisinherit>
 8003746:	0003      	movs	r3, r0
 8003748:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e043      	b.n	80037da <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d119      	bne.n	800378c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6858      	ldr	r0, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0019      	movs	r1, r3
 8003764:	f001 fa78 	bl	8004c58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d32b      	bcc.n	80037da <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e026      	b.n	80037da <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	0019      	movs	r1, r3
 8003798:	f001 fa5e 	bl	8004c58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	425b      	negs	r3, r3
 80037a6:	18d2      	adds	r2, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	425b      	negs	r3, r3
 80037c2:	18d2      	adds	r2, r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d105      	bne.n	80037da <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037e2:	697b      	ldr	r3, [r7, #20]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b006      	add	sp, #24
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	18d2      	adds	r2, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d303      	bcc.n	8003820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	0018      	movs	r0, r3
 800382c:	f001 fa14 	bl	8004c58 <memcpy>
	}
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003840:	f000 ff96 	bl	8004770 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	2145      	movs	r1, #69	; 0x45
 800384c:	5c52      	ldrb	r2, [r2, r1]
 800384e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003850:	e013      	b.n	800387a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3324      	adds	r3, #36	; 0x24
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fbb8 	bl	8003fd4 <xTaskRemoveFromEventList>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d001      	beq.n	800386c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003868:	f000 fc74 	bl	8004154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800386c:	210f      	movs	r1, #15
 800386e:	187b      	adds	r3, r7, r1
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	187b      	adds	r3, r7, r1
 8003878:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800387a:	230f      	movs	r3, #15
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b25b      	sxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	dce5      	bgt.n	8003852 <prvUnlockQueue+0x1a>
 8003886:	e000      	b.n	800388a <prvUnlockQueue+0x52>
					break;
 8003888:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2245      	movs	r2, #69	; 0x45
 800388e:	21ff      	movs	r1, #255	; 0xff
 8003890:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003892:	f000 ff7f 	bl	8004794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003896:	f000 ff6b 	bl	8004770 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800389a:	230e      	movs	r3, #14
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	2144      	movs	r1, #68	; 0x44
 80038a2:	5c52      	ldrb	r2, [r2, r1]
 80038a4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038a6:	e013      	b.n	80038d0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3310      	adds	r3, #16
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fb8d 	bl	8003fd4 <xTaskRemoveFromEventList>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80038be:	f000 fc49 	bl	8004154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038c2:	210e      	movs	r1, #14
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d0:	230e      	movs	r3, #14
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	dce5      	bgt.n	80038a8 <prvUnlockQueue+0x70>
 80038dc:	e000      	b.n	80038e0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80038de:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2244      	movs	r2, #68	; 0x44
 80038e4:	21ff      	movs	r1, #255	; 0xff
 80038e6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80038e8:	f000 ff54 	bl	8004794 <vPortExitCritical>
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b004      	add	sp, #16
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038fc:	f000 ff38 	bl	8004770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e001      	b.n	8003912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f000 ff3f 	bl	8004794 <vPortExitCritical>

	return xReturn;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}

08003920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003928:	f000 ff22 	bl	8004770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	429a      	cmp	r2, r3
 8003936:	d102      	bne.n	800393e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e001      	b.n	8003942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003942:	f000 ff27 	bl	8004794 <vPortExitCritical>

	return xReturn;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}

08003950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b08d      	sub	sp, #52	; 0x34
 8003954:	af04      	add	r7, sp, #16
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	1dbb      	adds	r3, r7, #6
 800395e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	0018      	movs	r0, r3
 8003968:	f000 ff9a 	bl	80048a0 <pvPortMalloc>
 800396c:	0003      	movs	r3, r0
 800396e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d010      	beq.n	8003998 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003976:	2054      	movs	r0, #84	; 0x54
 8003978:	f000 ff92 	bl	80048a0 <pvPortMalloc>
 800397c:	0003      	movs	r3, r0
 800397e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
 800398c:	e006      	b.n	800399c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	0018      	movs	r0, r3
 8003992:	f001 f831 	bl	80049f8 <vPortFree>
 8003996:	e001      	b.n	800399c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039a2:	1dbb      	adds	r3, r7, #6
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	683c      	ldr	r4, [r7, #0]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	9302      	str	r3, [sp, #8]
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	0023      	movs	r3, r4
 80039be:	f000 f80f 	bl	80039e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f88d 	bl	8003ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e002      	b.n	80039d6 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039d0:	2301      	movs	r3, #1
 80039d2:	425b      	negs	r3, r3
 80039d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039d6:	69bb      	ldr	r3, [r7, #24]
	}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b009      	add	sp, #36	; 0x24
 80039de:	bd90      	pop	{r4, r7, pc}

080039e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	493a      	ldr	r1, [pc, #232]	; (8003ae0 <prvInitialiseNewTask+0x100>)
 80039f6:	468c      	mov	ip, r1
 80039f8:	4463      	add	r3, ip
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2207      	movs	r2, #7
 8003a04:	4393      	bics	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d001      	beq.n	8003a14 <prvInitialiseNewTask+0x34>
 8003a10:	b672      	cpsid	i
 8003a12:	e7fe      	b.n	8003a12 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d020      	beq.n	8003a5c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e013      	b.n	8003a48 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	7818      	ldrb	r0, [r3, #0]
 8003a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2a:	2134      	movs	r1, #52	; 0x34
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	185b      	adds	r3, r3, r1
 8003a32:	1c02      	adds	r2, r0, #0
 8003a34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	18d3      	adds	r3, r2, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	3301      	adds	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	d9e8      	bls.n	8003a20 <prvInitialiseNewTask+0x40>
 8003a4e:	e000      	b.n	8003a52 <prvInitialiseNewTask+0x72>
			{
				break;
 8003a50:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	2243      	movs	r2, #67	; 0x43
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]
 8003a5a:	e003      	b.n	8003a64 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2234      	movs	r2, #52	; 0x34
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d901      	bls.n	8003a6e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	3304      	adds	r3, #4
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff fa9b 	bl	8002fc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff fa96 	bl	8002fc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2200      	movs	r2, #0
 8003aae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2250      	movs	r2, #80	; 0x50
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fdba 	bl	8004638 <pxPortInitialiseStack>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	3fffffff 	.word	0x3fffffff

08003ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003aec:	f000 fe40 	bl	8004770 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <prvAddNewTaskToReadyList+0xb0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <prvAddNewTaskToReadyList+0xb0>)
 8003af8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <prvAddNewTaskToReadyList+0xb4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <prvAddNewTaskToReadyList+0xb4>)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <prvAddNewTaskToReadyList+0xb0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d110      	bne.n	8003b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b10:	f000 fb3a 	bl	8004188 <prvInitialiseTaskLists>
 8003b14:	e00d      	b.n	8003b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <prvAddNewTaskToReadyList+0xb8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <prvAddNewTaskToReadyList+0xb4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d802      	bhi.n	8003b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <prvAddNewTaskToReadyList+0xb4>)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <prvAddNewTaskToReadyList+0xbc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <prvAddNewTaskToReadyList+0xbc>)
 8003b3a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <prvAddNewTaskToReadyList+0xc0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d903      	bls.n	8003b50 <prvAddNewTaskToReadyList+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <prvAddNewTaskToReadyList+0xc0>)
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	0013      	movs	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <prvAddNewTaskToReadyList+0xc4>)
 8003b5e:	189a      	adds	r2, r3, r2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	0019      	movs	r1, r3
 8003b66:	0010      	movs	r0, r2
 8003b68:	f7ff fa35 	bl	8002fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b6c:	f000 fe12 	bl	8004794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddNewTaskToReadyList+0xb8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <prvAddNewTaskToReadyList+0xb4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d201      	bcs.n	8003b8a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b86:	f000 fde3 	bl	8004750 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000288 	.word	0x20000288
 8003b98:	20000188 	.word	0x20000188
 8003b9c:	20000294 	.word	0x20000294
 8003ba0:	200002a4 	.word	0x200002a4
 8003ba4:	20000290 	.word	0x20000290
 8003ba8:	2000018c 	.word	0x2000018c

08003bac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <vTaskDelay+0x48>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <vTaskDelay+0x1e>
 8003bc6:	b672      	cpsid	i
 8003bc8:	e7fe      	b.n	8003bc8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003bca:	f000 f84b 	bl	8003c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fcdc 	bl	8004590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bd8:	f000 f850 	bl	8003c7c <xTaskResumeAll>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003be6:	f000 fdb3 	bl	8004750 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	200002b0 	.word	0x200002b0

08003bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003bfe:	4913      	ldr	r1, [pc, #76]	; (8003c4c <vTaskStartScheduler+0x54>)
 8003c00:	4813      	ldr	r0, [pc, #76]	; (8003c50 <vTaskStartScheduler+0x58>)
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <vTaskStartScheduler+0x5c>)
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	f7ff fe9f 	bl	8003950 <xTaskCreate>
 8003c12:	0003      	movs	r3, r0
 8003c14:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10d      	bne.n	8003c38 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003c1c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <vTaskStartScheduler+0x60>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	4252      	negs	r2, r2
 8003c24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <vTaskStartScheduler+0x64>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <vTaskStartScheduler+0x68>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c32:	f000 fd69 	bl	8004708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c36:	e004      	b.n	8003c42 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <vTaskStartScheduler+0x4a>
 8003c3e:	b672      	cpsid	i
 8003c40:	e7fe      	b.n	8003c40 <vTaskStartScheduler+0x48>
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	080057ac 	.word	0x080057ac
 8003c50:	08004169 	.word	0x08004169
 8003c54:	200002ac 	.word	0x200002ac
 8003c58:	200002a8 	.word	0x200002a8
 8003c5c:	20000294 	.word	0x20000294
 8003c60:	2000028c 	.word	0x2000028c

08003c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <vTaskSuspendAll+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <vTaskSuspendAll+0x14>)
 8003c70:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	200002b0 	.word	0x200002b0

08003c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <xTaskResumeAll+0xf8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <xTaskResumeAll+0x1a>
 8003c92:	b672      	cpsid	i
 8003c94:	e7fe      	b.n	8003c94 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c96:	f000 fd6b 	bl	8004770 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <xTaskResumeAll+0xf8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <xTaskResumeAll+0xf8>)
 8003ca2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <xTaskResumeAll+0xf8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d15b      	bne.n	8003d64 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <xTaskResumeAll+0xfc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d057      	beq.n	8003d64 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cb4:	e02f      	b.n	8003d16 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb6:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <xTaskResumeAll+0x100>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7ff f9df 	bl	8003086 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7ff f9da 	bl	8003086 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <xTaskResumeAll+0x104>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d903      	bls.n	8003ce6 <xTaskResumeAll+0x6a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <xTaskResumeAll+0x104>)
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cea:	0013      	movs	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <xTaskResumeAll+0x108>)
 8003cf4:	189a      	adds	r2, r3, r2
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	f7ff f96a 	bl	8002fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <xTaskResumeAll+0x10c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <xTaskResumeAll+0x110>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <xTaskResumeAll+0x100>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1cb      	bne.n	8003cb6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d24:	f000 fab4 	bl	8004290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <xTaskResumeAll+0x114>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d34:	f000 f82e 	bl	8003d94 <xTaskIncrementTick>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d002      	beq.n	8003d42 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <xTaskResumeAll+0x110>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f2      	bne.n	8003d34 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <xTaskResumeAll+0x114>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <xTaskResumeAll+0x110>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d60:	f000 fcf6 	bl	8004750 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d64:	f000 fd16 	bl	8004794 <vPortExitCritical>

	return xAlreadyYielded;
 8003d68:	68bb      	ldr	r3, [r7, #8]
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	200002b0 	.word	0x200002b0
 8003d78:	20000288 	.word	0x20000288
 8003d7c:	20000248 	.word	0x20000248
 8003d80:	20000290 	.word	0x20000290
 8003d84:	2000018c 	.word	0x2000018c
 8003d88:	20000188 	.word	0x20000188
 8003d8c:	2000029c 	.word	0x2000029c
 8003d90:	20000298 	.word	0x20000298

08003d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <xTaskIncrementTick+0x134>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d000      	beq.n	8003da8 <xTaskIncrementTick+0x14>
 8003da6:	e084      	b.n	8003eb2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da8:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <xTaskIncrementTick+0x138>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <xTaskIncrementTick+0x138>)
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d117      	bne.n	8003dec <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dbc:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <xTaskIncrementTick+0x13c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <xTaskIncrementTick+0x36>
 8003dc6:	b672      	cpsid	i
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskIncrementTick+0x34>
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <xTaskIncrementTick+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <xTaskIncrementTick+0x140>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <xTaskIncrementTick+0x13c>)
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <xTaskIncrementTick+0x140>)
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <xTaskIncrementTick+0x144>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	4b3c      	ldr	r3, [pc, #240]	; (8003ed8 <xTaskIncrementTick+0x144>)
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f000 fa52 	bl	8004290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <xTaskIncrementTick+0x148>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d349      	bcc.n	8003e8a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df6:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <xTaskIncrementTick+0x13c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <xTaskIncrementTick+0x148>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	4252      	negs	r2, r2
 8003e06:	601a      	str	r2, [r3, #0]
					break;
 8003e08:	e03f      	b.n	8003e8a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <xTaskIncrementTick+0x13c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d203      	bcs.n	8003e2a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <xTaskIncrementTick+0x148>)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e28:	e02f      	b.n	8003e8a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff f929 	bl	8003086 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff f920 	bl	8003086 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <xTaskIncrementTick+0x14c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d903      	bls.n	8003e5a <xTaskIncrementTick+0xc6>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <xTaskIncrementTick+0x14c>)
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	0013      	movs	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <xTaskIncrementTick+0x150>)
 8003e68:	189a      	adds	r2, r3, r2
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	0019      	movs	r1, r3
 8003e70:	0010      	movs	r0, r2
 8003e72:	f7ff f8b0 	bl	8002fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <xTaskIncrementTick+0x154>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3b8      	bcc.n	8003df6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e88:	e7b5      	b.n	8003df6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <xTaskIncrementTick+0x154>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4914      	ldr	r1, [pc, #80]	; (8003ee4 <xTaskIncrementTick+0x150>)
 8003e92:	0013      	movs	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	585b      	ldr	r3, [r3, r1]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d901      	bls.n	8003ea4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <xTaskIncrementTick+0x158>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e004      	b.n	8003ebc <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <xTaskIncrementTick+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <xTaskIncrementTick+0x15c>)
 8003eba:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ebc:	697b      	ldr	r3, [r7, #20]
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	200002b0 	.word	0x200002b0
 8003ecc:	2000028c 	.word	0x2000028c
 8003ed0:	20000240 	.word	0x20000240
 8003ed4:	20000244 	.word	0x20000244
 8003ed8:	200002a0 	.word	0x200002a0
 8003edc:	200002a8 	.word	0x200002a8
 8003ee0:	20000290 	.word	0x20000290
 8003ee4:	2000018c 	.word	0x2000018c
 8003ee8:	20000188 	.word	0x20000188
 8003eec:	2000029c 	.word	0x2000029c
 8003ef0:	20000298 	.word	0x20000298

08003ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <vTaskSwitchContext+0x90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <vTaskSwitchContext+0x94>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f08:	e037      	b.n	8003f7a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <vTaskSwitchContext+0x94>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <vTaskSwitchContext+0x98>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	e007      	b.n	8003f28 <vTaskSwitchContext+0x34>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <vTaskSwitchContext+0x2e>
 8003f1e:	b672      	cpsid	i
 8003f20:	e7fe      	b.n	8003f20 <vTaskSwitchContext+0x2c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	4919      	ldr	r1, [pc, #100]	; (8003f90 <vTaskSwitchContext+0x9c>)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	585b      	ldr	r3, [r3, r1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ee      	beq.n	8003f18 <vTaskSwitchContext+0x24>
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <vTaskSwitchContext+0x9c>)
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <vTaskSwitchContext+0x76>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <vTaskSwitchContext+0xa0>)
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <vTaskSwitchContext+0x98>)
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	200002b0 	.word	0x200002b0
 8003f88:	2000029c 	.word	0x2000029c
 8003f8c:	20000290 	.word	0x20000290
 8003f90:	2000018c 	.word	0x2000018c
 8003f94:	20000188 	.word	0x20000188

08003f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <vTaskPlaceOnEventList+0x14>
 8003fa8:	b672      	cpsid	i
 8003faa:	e7fe      	b.n	8003faa <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <vTaskPlaceOnEventList+0x38>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff f82e 	bl	800301a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 fae4 	bl	8004590 <prvAddCurrentTaskToDelayedList>
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000188 	.word	0x20000188

08003fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <xTaskRemoveFromEventList+0x1a>
 8003fea:	b672      	cpsid	i
 8003fec:	e7fe      	b.n	8003fec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff f847 	bl	8003086 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <xTaskRemoveFromEventList+0xa0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11d      	bne.n	800403c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3304      	adds	r3, #4
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff f83e 	bl	8003086 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <xTaskRemoveFromEventList+0xa4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d903      	bls.n	800401e <xTaskRemoveFromEventList+0x4a>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <xTaskRemoveFromEventList+0xa4>)
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	0013      	movs	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	189b      	adds	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <xTaskRemoveFromEventList+0xa8>)
 800402c:	189a      	adds	r2, r3, r2
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	0019      	movs	r1, r3
 8004034:	0010      	movs	r0, r2
 8004036:	f7fe ffce 	bl	8002fd6 <vListInsertEnd>
 800403a:	e007      	b.n	800404c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3318      	adds	r3, #24
 8004040:	001a      	movs	r2, r3
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <xTaskRemoveFromEventList+0xac>)
 8004044:	0011      	movs	r1, r2
 8004046:	0018      	movs	r0, r3
 8004048:	f7fe ffc5 	bl	8002fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <xTaskRemoveFromEventList+0xb0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	429a      	cmp	r2, r3
 8004058:	d905      	bls.n	8004066 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <xTaskRemoveFromEventList+0xb4>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e001      	b.n	800406a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200002b0 	.word	0x200002b0
 8004078:	20000290 	.word	0x20000290
 800407c:	2000018c 	.word	0x2000018c
 8004080:	20000248 	.word	0x20000248
 8004084:	20000188 	.word	0x20000188
 8004088:	2000029c 	.word	0x2000029c

0800408c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <vTaskInternalSetTimeOutState+0x20>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <vTaskInternalSetTimeOutState+0x24>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	200002a0 	.word	0x200002a0
 80040b0:	2000028c 	.word	0x2000028c

080040b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xTaskCheckForTimeOut+0x14>
 80040c4:	b672      	cpsid	i
 80040c6:	e7fe      	b.n	80040c6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xTaskCheckForTimeOut+0x1e>
 80040ce:	b672      	cpsid	i
 80040d0:	e7fe      	b.n	80040d0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80040d2:	f000 fb4d 	bl	8004770 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <xTaskCheckForTimeOut+0x98>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3301      	adds	r3, #1
 80040ec:	d102      	bne.n	80040f4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e024      	b.n	800413e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <xTaskCheckForTimeOut+0x9c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d007      	beq.n	8004110 <xTaskCheckForTimeOut+0x5c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e016      	b.n	800413e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad2      	subs	r2, r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ffaf 	bl	800408c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e004      	b.n	800413e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f000 fb29 	bl	8004794 <vPortExitCritical>

	return xReturn;
 8004142:	697b      	ldr	r3, [r7, #20]
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b006      	add	sp, #24
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000028c 	.word	0x2000028c
 8004150:	200002a0 	.word	0x200002a0

08004154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <vTaskMissedYield+0x10>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000029c 	.word	0x2000029c

08004168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004170:	f000 f84e 	bl	8004210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <prvIdleTask+0x1c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d9f9      	bls.n	8004170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800417c:	f000 fae8 	bl	8004750 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004180:	e7f6      	b.n	8004170 <prvIdleTask+0x8>
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	2000018c 	.word	0x2000018c

08004188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	e00c      	b.n	80041ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	0013      	movs	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	189b      	adds	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <prvInitialiseTaskLists+0x68>)
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fe feee 	bl	8002f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3301      	adds	r3, #1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d9ef      	bls.n	8004194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <prvInitialiseTaskLists+0x6c>)
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7fe fee4 	bl	8002f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <prvInitialiseTaskLists+0x70>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f7fe fee0 	bl	8002f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvInitialiseTaskLists+0x74>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7fe fedc 	bl	8002f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <prvInitialiseTaskLists+0x78>)
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fe fed8 	bl	8002f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <prvInitialiseTaskLists+0x7c>)
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7fe fed4 	bl	8002f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvInitialiseTaskLists+0x80>)
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <prvInitialiseTaskLists+0x6c>)
 80041e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <prvInitialiseTaskLists+0x84>)
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <prvInitialiseTaskLists+0x70>)
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2000018c 	.word	0x2000018c
 80041f4:	20000218 	.word	0x20000218
 80041f8:	2000022c 	.word	0x2000022c
 80041fc:	20000248 	.word	0x20000248
 8004200:	2000025c 	.word	0x2000025c
 8004204:	20000274 	.word	0x20000274
 8004208:	20000240 	.word	0x20000240
 800420c:	20000244 	.word	0x20000244

08004210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004216:	e01a      	b.n	800424e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004218:	f000 faaa 	bl	8004770 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <prvCheckTasksWaitingTermination+0x50>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	0018      	movs	r0, r3
 800422a:	f7fe ff2c 	bl	8003086 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <prvCheckTasksWaitingTermination+0x54>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvCheckTasksWaitingTermination+0x54>)
 8004236:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 8004240:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004242:	f000 faa7 	bl	8004794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f80f 	bl	800426c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800424e:	4b06      	ldr	r3, [pc, #24]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e0      	bne.n	8004218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2000025c 	.word	0x2000025c
 8004264:	20000288 	.word	0x20000288
 8004268:	20000270 	.word	0x20000270

0800426c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	0018      	movs	r0, r3
 800427a:	f000 fbbd 	bl	80049f8 <vPortFree>
			vPortFree( pxTCB );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 fbb9 	bl	80049f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	46bd      	mov	sp, r7
 800428a:	b002      	add	sp, #8
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <prvResetNextTaskUnblockTime+0x34>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	4252      	negs	r2, r2
 80042a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a8:	e008      	b.n	80042bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <prvResetNextTaskUnblockTime+0x34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000240 	.word	0x20000240
 80042c8:	200002a8 	.word	0x200002a8

080042cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <xTaskGetSchedulerState+0x30>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042da:	2301      	movs	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e008      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <xTaskGetSchedulerState+0x34>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e8:	2302      	movs	r3, #2
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e001      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f2:	687b      	ldr	r3, [r7, #4]
	}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000294 	.word	0x20000294
 8004300:	200002b0 	.word	0x200002b0

08004304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d051      	beq.n	80043be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <xTaskPriorityInherit+0xc4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	429a      	cmp	r2, r3
 8004326:	d241      	bcs.n	80043ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db06      	blt.n	800433e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <xTaskPriorityInherit+0xc4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	2207      	movs	r2, #7
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6959      	ldr	r1, [r3, #20]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	0013      	movs	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	189b      	adds	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <xTaskPriorityInherit+0xc8>)
 8004350:	189b      	adds	r3, r3, r2
 8004352:	4299      	cmp	r1, r3
 8004354:	d122      	bne.n	800439c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3304      	adds	r3, #4
 800435a:	0018      	movs	r0, r3
 800435c:	f7fe fe93 	bl	8003086 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <xTaskPriorityInherit+0xc4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <xTaskPriorityInherit+0xcc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d903      	bls.n	800437e <xTaskPriorityInherit+0x7a>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <xTaskPriorityInherit+0xcc>)
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	0013      	movs	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	189b      	adds	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <xTaskPriorityInherit+0xc8>)
 800438c:	189a      	adds	r2, r3, r2
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3304      	adds	r3, #4
 8004392:	0019      	movs	r1, r3
 8004394:	0010      	movs	r0, r2
 8004396:	f7fe fe1e 	bl	8002fd6 <vListInsertEnd>
 800439a:	e004      	b.n	80043a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <xTaskPriorityInherit+0xc4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e008      	b.n	80043be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <xTaskPriorityInherit+0xc4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d201      	bcs.n	80043be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043be:	68fb      	ldr	r3, [r7, #12]
	}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000188 	.word	0x20000188
 80043cc:	2000018c 	.word	0x2000018c
 80043d0:	20000290 	.word	0x20000290

080043d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d044      	beq.n	8004474 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <xTaskPriorityDisinherit+0xac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <xTaskPriorityDisinherit+0x24>
 80043f4:	b672      	cpsid	i
 80043f6:	e7fe      	b.n	80043f6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <xTaskPriorityDisinherit+0x30>
 8004400:	b672      	cpsid	i
 8004402:	e7fe      	b.n	8004402 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	429a      	cmp	r2, r3
 8004418:	d02c      	beq.n	8004474 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441e:	2b00      	cmp	r3, #0
 8004420:	d128      	bne.n	8004474 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3304      	adds	r3, #4
 8004426:	0018      	movs	r0, r3
 8004428:	f7fe fe2d 	bl	8003086 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2207      	movs	r2, #7
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <xTaskPriorityDisinherit+0xb0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d903      	bls.n	8004454 <xTaskPriorityDisinherit+0x80>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xTaskPriorityDisinherit+0xb0>)
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	0013      	movs	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	189b      	adds	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4a09      	ldr	r2, [pc, #36]	; (8004488 <xTaskPriorityDisinherit+0xb4>)
 8004462:	189a      	adds	r2, r3, r2
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	3304      	adds	r3, #4
 8004468:	0019      	movs	r1, r3
 800446a:	0010      	movs	r0, r2
 800446c:	f7fe fdb3 	bl	8002fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004474:	68fb      	ldr	r3, [r7, #12]
	}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	20000188 	.word	0x20000188
 8004484:	20000290 	.word	0x20000290
 8004488:	2000018c 	.word	0x2000018c

0800448c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800449a:	2301      	movs	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d058      	beq.n	8004556 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80044ac:	b672      	cpsid	i
 80044ae:	e7fe      	b.n	80044ae <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d902      	bls.n	80044c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e002      	b.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d042      	beq.n	8004556 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d13d      	bne.n	8004556 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d101      	bne.n	80044e8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80044e4:	b672      	cpsid	i
 80044e6:	e7fe      	b.n	80044e6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db04      	blt.n	8004506 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2207      	movs	r2, #7
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	0013      	movs	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	189b      	adds	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8004516:	189b      	adds	r3, r3, r2
 8004518:	4299      	cmp	r1, r3
 800451a:	d11c      	bne.n	8004556 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3304      	adds	r3, #4
 8004520:	0018      	movs	r0, r3
 8004522:	f7fe fdb0 	bl	8003086 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d903      	bls.n	800453a <vTaskPriorityDisinheritAfterTimeout+0xae>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	0013      	movs	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	189b      	adds	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8004548:	189a      	adds	r2, r3, r2
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	0019      	movs	r1, r3
 8004550:	0010      	movs	r0, r2
 8004552:	f7fe fd40 	bl	8002fd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b006      	add	sp, #24
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	20000188 	.word	0x20000188
 8004564:	2000018c 	.word	0x2000018c
 8004568:	20000290 	.word	0x20000290

0800456c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <pvTaskIncrementMutexHeldCount+0x20>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <pvTaskIncrementMutexHeldCount+0x20>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800457e:	3201      	adds	r2, #1
 8004580:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004582:	4b02      	ldr	r3, [pc, #8]	; (800458c <pvTaskIncrementMutexHeldCount+0x20>)
 8004584:	681b      	ldr	r3, [r3, #0]
	}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000188 	.word	0x20000188

08004590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <prvAddCurrentTaskToDelayedList+0x90>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3304      	adds	r3, #4
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fe fd6d 	bl	8003086 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d10b      	bne.n	80045ca <prvAddCurrentTaskToDelayedList+0x3a>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <prvAddCurrentTaskToDelayedList+0x98>)
 80045c0:	0011      	movs	r1, r2
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7fe fd07 	bl	8002fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045c8:	e026      	b.n	8004618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d209      	bcs.n	80045f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <prvAddCurrentTaskToDelayedList+0x9c>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	0019      	movs	r1, r3
 80045ee:	0010      	movs	r0, r2
 80045f0:	f7fe fd13 	bl	800301a <vListInsert>
}
 80045f4:	e010      	b.n	8004618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	0019      	movs	r1, r3
 8004602:	0010      	movs	r0, r2
 8004604:	f7fe fd09 	bl	800301a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d202      	bcs.n	8004618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b004      	add	sp, #16
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000028c 	.word	0x2000028c
 8004624:	20000188 	.word	0x20000188
 8004628:	20000274 	.word	0x20000274
 800462c:	20000244 	.word	0x20000244
 8004630:	20000240 	.word	0x20000240
 8004634:	200002a8 	.word	0x200002a8

08004638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b04      	subs	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	0452      	lsls	r2, r2, #17
 8004650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b04      	subs	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <pxPortInitialiseStack+0x50>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b14      	subs	r3, #20
 800466e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b20      	subs	r3, #32
 800467a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b004      	add	sp, #16
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	0800468d 	.word	0x0800468d

0800468c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <prvTaskExitError+0x2c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	d001      	beq.n	80046a2 <prvTaskExitError+0x16>
 800469e:	b672      	cpsid	i
 80046a0:	e7fe      	b.n	80046a0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80046a2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0fc      	beq.n	80046a6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	2000000c 	.word	0x2000000c

080046bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <pxCurrentTCBConst2>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	3020      	adds	r0, #32
 80046d8:	f380 8809 	msr	PSP, r0
 80046dc:	2002      	movs	r0, #2
 80046de:	f380 8814 	msr	CONTROL, r0
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80046e8:	46ae      	mov	lr, r5
 80046ea:	bc08      	pop	{r3}
 80046ec:	bc04      	pop	{r2}
 80046ee:	b662      	cpsie	i
 80046f0:	4718      	bx	r3
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46c0      	nop			; (mov r8, r8)

08004700 <pxCurrentTCBConst2>:
 8004700:	20000188 	.word	0x20000188
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46c0      	nop			; (mov r8, r8)

08004708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <xPortStartScheduler+0x40>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <xPortStartScheduler+0x40>)
 8004712:	21ff      	movs	r1, #255	; 0xff
 8004714:	0409      	lsls	r1, r1, #16
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <xPortStartScheduler+0x40>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <xPortStartScheduler+0x40>)
 8004720:	21ff      	movs	r1, #255	; 0xff
 8004722:	0609      	lsls	r1, r1, #24
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004728:	f000 f898 	bl	800485c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <xPortStartScheduler+0x44>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004732:	f7ff ffcd 	bl	80046d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004736:	f7ff fbdd 	bl	8003ef4 <vTaskSwitchContext>
	prvTaskExitError();
 800473a:	f7ff ffa7 	bl	800468c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	e000ed20 	.word	0xe000ed20
 800474c:	2000000c 	.word	0x2000000c

08004750 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <vPortYield+0x1c>)
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	0552      	lsls	r2, r2, #21
 800475a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800475c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004760:	f3bf 8f6f 	isb	sy
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004774:	b672      	cpsid	i
	uxCriticalNesting++;
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <vPortEnterCritical+0x20>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vPortEnterCritical+0x20>)
 800477e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004780:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004784:	f3bf 8f6f 	isb	sy
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	2000000c 	.word	0x2000000c

08004794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <vPortExitCritical+0x2c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <vPortExitCritical+0x10>
 80047a0:	b672      	cpsid	i
 80047a2:	e7fe      	b.n	80047a2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <vPortExitCritical+0x2c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <vPortExitCritical+0x2c>)
 80047ac:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortExitCritical+0x2c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d100      	bne.n	80047b8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80047b6:	b662      	cpsie	i
	}
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	2000000c 	.word	0x2000000c

080047c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80047c4:	f3ef 8010 	mrs	r0, PRIMASK
 80047c8:	b672      	cpsid	i
 80047ca:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	0018      	movs	r0, r3

080047d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80047d0:	f380 8810 	msr	PRIMASK, r0
 80047d4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80047d6:	46c0      	nop			; (mov r8, r8)
	...

080047e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047e0:	f3ef 8009 	mrs	r0, PSP
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <pxCurrentTCBConst>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	3820      	subs	r0, #32
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047ee:	4644      	mov	r4, r8
 80047f0:	464d      	mov	r5, r9
 80047f2:	4656      	mov	r6, sl
 80047f4:	465f      	mov	r7, fp
 80047f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047f8:	b508      	push	{r3, lr}
 80047fa:	b672      	cpsid	i
 80047fc:	f7ff fb7a 	bl	8003ef4 <vTaskSwitchContext>
 8004800:	b662      	cpsie	i
 8004802:	bc0c      	pop	{r2, r3}
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	6808      	ldr	r0, [r1, #0]
 8004808:	3010      	adds	r0, #16
 800480a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800480c:	46a0      	mov	r8, r4
 800480e:	46a9      	mov	r9, r5
 8004810:	46b2      	mov	sl, r6
 8004812:	46bb      	mov	fp, r7
 8004814:	f380 8809 	msr	PSP, r0
 8004818:	3820      	subs	r0, #32
 800481a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800481c:	4718      	bx	r3
 800481e:	46c0      	nop			; (mov r8, r8)

08004820 <pxCurrentTCBConst>:
 8004820:	20000188 	.word	0x20000188
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46c0      	nop			; (mov r8, r8)

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800482e:	f7ff ffc9 	bl	80047c4 <ulSetInterruptMaskFromISR>
 8004832:	0003      	movs	r3, r0
 8004834:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7ff faad 	bl	8003d94 <xTaskIncrementTick>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d003      	beq.n	8004846 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <SysTick_Handler+0x30>)
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	0552      	lsls	r2, r2, #21
 8004844:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f7ff ffc1 	bl	80047d0 <vClearInterruptMaskFromISR>
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	22fa      	movs	r2, #250	; 0xfa
 8004872:	0091      	lsls	r1, r2, #2
 8004874:	0018      	movs	r0, r3
 8004876:	f7fb fc47 	bl	8000108 <__udivsi3>
 800487a:	0003      	movs	r3, r0
 800487c:	001a      	movs	r2, r3
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004880:	3a01      	subs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004886:	2207      	movs	r2, #7
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	e000e014 	.word	0xe000e014

080048a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80048ac:	f7ff f9da 	bl	8003c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048b0:	4b4b      	ldr	r3, [pc, #300]	; (80049e0 <pvPortMalloc+0x140>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048b8:	f000 f8ec 	bl	8004a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048bc:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <pvPortMalloc+0x144>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4013      	ands	r3, r2
 80048c4:	d000      	beq.n	80048c8 <pvPortMalloc+0x28>
 80048c6:	e07e      	b.n	80049c6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80048ce:	2208      	movs	r2, #8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2207      	movs	r2, #7
 80048da:	4013      	ands	r3, r2
 80048dc:	d00a      	beq.n	80048f4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2207      	movs	r2, #7
 80048e2:	4393      	bics	r3, r2
 80048e4:	3308      	adds	r3, #8
 80048e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2207      	movs	r2, #7
 80048ec:	4013      	ands	r3, r2
 80048ee:	d001      	beq.n	80048f4 <pvPortMalloc+0x54>
 80048f0:	b672      	cpsid	i
 80048f2:	e7fe      	b.n	80048f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d065      	beq.n	80049c6 <pvPortMalloc+0x126>
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <pvPortMalloc+0x148>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d860      	bhi.n	80049c6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <pvPortMalloc+0x14c>)
 8004906:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004908:	4b38      	ldr	r3, [pc, #224]	; (80049ec <pvPortMalloc+0x14c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800490e:	e004      	b.n	800491a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d903      	bls.n	800492c <pvPortMalloc+0x8c>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f1      	bne.n	8004910 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <pvPortMalloc+0x140>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	429a      	cmp	r2, r3
 8004934:	d047      	beq.n	80049c6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2208      	movs	r2, #8
 800493c:	189b      	adds	r3, r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	2308      	movs	r3, #8
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	429a      	cmp	r2, r3
 8004956:	d916      	bls.n	8004986 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2207      	movs	r2, #7
 8004964:	4013      	ands	r3, r2
 8004966:	d001      	beq.n	800496c <pvPortMalloc+0xcc>
 8004968:	b672      	cpsid	i
 800496a:	e7fe      	b.n	800496a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 f8e7 	bl	8004b54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <pvPortMalloc+0x148>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <pvPortMalloc+0x148>)
 8004992:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <pvPortMalloc+0x148>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <pvPortMalloc+0x150>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d203      	bcs.n	80049a8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <pvPortMalloc+0x148>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <pvPortMalloc+0x150>)
 80049a6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <pvPortMalloc+0x144>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <pvPortMalloc+0x154>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <pvPortMalloc+0x154>)
 80049c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049c6:	f7ff f959 	bl	8003c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2207      	movs	r2, #7
 80049ce:	4013      	ands	r3, r2
 80049d0:	d001      	beq.n	80049d6 <pvPortMalloc+0x136>
 80049d2:	b672      	cpsid	i
 80049d4:	e7fe      	b.n	80049d4 <pvPortMalloc+0x134>
	return pvReturn;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b006      	add	sp, #24
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000ebc 	.word	0x20000ebc
 80049e4:	20000ed0 	.word	0x20000ed0
 80049e8:	20000ec0 	.word	0x20000ec0
 80049ec:	20000eb4 	.word	0x20000eb4
 80049f0:	20000ec4 	.word	0x20000ec4
 80049f4:	20000ec8 	.word	0x20000ec8

080049f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d03a      	beq.n	8004a80 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	425b      	negs	r3, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	18d3      	adds	r3, r2, r3
 8004a12:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <vPortFree+0x90>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4013      	ands	r3, r2
 8004a22:	d101      	bne.n	8004a28 <vPortFree+0x30>
 8004a24:	b672      	cpsid	i
 8004a26:	e7fe      	b.n	8004a26 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <vPortFree+0x3c>
 8004a30:	b672      	cpsid	i
 8004a32:	e7fe      	b.n	8004a32 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <vPortFree+0x90>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d01f      	beq.n	8004a80 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11b      	bne.n	8004a80 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <vPortFree+0x90>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a58:	f7ff f904 	bl	8003c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <vPortFree+0x94>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	18d2      	adds	r2, r2, r3
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <vPortFree+0x94>)
 8004a68:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f871 	bl	8004b54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <vPortFree+0x98>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <vPortFree+0x98>)
 8004a7a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8004a7c:	f7ff f8fe 	bl	8003c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b004      	add	sp, #16
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000ed0 	.word	0x20000ed0
 8004a8c:	20000ec0 	.word	0x20000ec0
 8004a90:	20000ecc 	.word	0x20000ecc

08004a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a9a:	23c0      	movs	r3, #192	; 0xc0
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004aa0:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <prvHeapInit+0xa8>)
 8004aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2207      	movs	r2, #7
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d00c      	beq.n	8004ac6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3307      	adds	r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <prvHeapInit+0xa8>)
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <prvHeapInit+0xac>)
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <prvHeapInit+0xac>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ade:	2208      	movs	r2, #8
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2207      	movs	r2, #7
 8004aea:	4393      	bics	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <prvHeapInit+0xb0>)
 8004af2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <prvHeapInit+0xb0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <prvHeapInit+0xb0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <prvHeapInit+0xb0>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvHeapInit+0xb4>)
 8004b20:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <prvHeapInit+0xb8>)
 8004b28:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <prvHeapInit+0xbc>)
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	0612      	lsls	r2, r2, #24
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b004      	add	sp, #16
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	200002b4 	.word	0x200002b4
 8004b40:	20000eb4 	.word	0x20000eb4
 8004b44:	20000ebc 	.word	0x20000ebc
 8004b48:	20000ec4 	.word	0x20000ec4
 8004b4c:	20000ec0 	.word	0x20000ec0
 8004b50:	20000ed0 	.word	0x20000ed0

08004b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <prvInsertBlockIntoFreeList+0xa8>)
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e002      	b.n	8004b68 <prvInsertBlockIntoFreeList+0x14>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d8f7      	bhi.n	8004b62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d108      	bne.n	8004b96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	18d2      	adds	r2, r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	18d2      	adds	r2, r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d118      	bne.n	8004bdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <prvInsertBlockIntoFreeList+0xac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d00d      	beq.n	8004bd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	18d2      	adds	r2, r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e008      	b.n	8004be4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <prvInsertBlockIntoFreeList+0xac>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e003      	b.n	8004be4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d002      	beq.n	8004bf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b004      	add	sp, #16
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	20000eb4 	.word	0x20000eb4
 8004c00:	20000ebc 	.word	0x20000ebc

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20000010 	.word	0x20000010

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	2600      	movs	r6, #0
 8004c14:	4d0c      	ldr	r5, [pc, #48]	; (8004c48 <__libc_init_array+0x38>)
 8004c16:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c18:	1b64      	subs	r4, r4, r5
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	2600      	movs	r6, #0
 8004c22:	f000 fd75 	bl	8005710 <_init>
 8004c26:	4d0a      	ldr	r5, [pc, #40]	; (8004c50 <__libc_init_array+0x40>)
 8004c28:	4c0a      	ldr	r4, [pc, #40]	; (8004c54 <__libc_init_array+0x44>)
 8004c2a:	1b64      	subs	r4, r4, r5
 8004c2c:	10a4      	asrs	r4, r4, #2
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	00b3      	lsls	r3, r6, #2
 8004c36:	58eb      	ldr	r3, [r5, r3]
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	00b3      	lsls	r3, r6, #2
 8004c40:	58eb      	ldr	r3, [r5, r3]
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	080058a0 	.word	0x080058a0
 8004c4c:	080058a0 	.word	0x080058a0
 8004c50:	080058a0 	.word	0x080058a0
 8004c54:	080058a4 	.word	0x080058a4

08004c58 <memcpy>:
 8004c58:	2300      	movs	r3, #0
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d100      	bne.n	8004c62 <memcpy+0xa>
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	5ccc      	ldrb	r4, [r1, r3]
 8004c64:	54c4      	strb	r4, [r0, r3]
 8004c66:	3301      	adds	r3, #1
 8004c68:	e7f8      	b.n	8004c5c <memcpy+0x4>

08004c6a <memset>:
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	1882      	adds	r2, r0, r2
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d100      	bne.n	8004c74 <memset+0xa>
 8004c72:	4770      	bx	lr
 8004c74:	7019      	strb	r1, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	e7f9      	b.n	8004c6e <memset+0x4>
	...

08004c7c <_puts_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	0005      	movs	r5, r0
 8004c80:	000e      	movs	r6, r1
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d004      	beq.n	8004c90 <_puts_r+0x14>
 8004c86:	6983      	ldr	r3, [r0, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <_puts_r+0x14>
 8004c8c:	f000 fa6e 	bl	800516c <__sinit>
 8004c90:	69ab      	ldr	r3, [r5, #24]
 8004c92:	68ac      	ldr	r4, [r5, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <_puts_r+0x22>
 8004c98:	0028      	movs	r0, r5
 8004c9a:	f000 fa67 	bl	800516c <__sinit>
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <_puts_r+0xd8>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d122      	bne.n	8004cea <_puts_r+0x6e>
 8004ca4:	686c      	ldr	r4, [r5, #4]
 8004ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ca8:	07db      	lsls	r3, r3, #31
 8004caa:	d405      	bmi.n	8004cb8 <_puts_r+0x3c>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	059b      	lsls	r3, r3, #22
 8004cb0:	d402      	bmi.n	8004cb8 <_puts_r+0x3c>
 8004cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb4:	f000 fafb 	bl	80052ae <__retarget_lock_acquire_recursive>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	071b      	lsls	r3, r3, #28
 8004cbc:	d502      	bpl.n	8004cc4 <_puts_r+0x48>
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d129      	bne.n	8004d18 <_puts_r+0x9c>
 8004cc4:	0021      	movs	r1, r4
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	f000 f8aa 	bl	8004e20 <__swsetup_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d023      	beq.n	8004d18 <_puts_r+0x9c>
 8004cd0:	2501      	movs	r5, #1
 8004cd2:	426d      	negs	r5, r5
 8004cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cd6:	07db      	lsls	r3, r3, #31
 8004cd8:	d405      	bmi.n	8004ce6 <_puts_r+0x6a>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <_puts_r+0x6a>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 fae5 	bl	80052b0 <__retarget_lock_release_recursive>
 8004ce6:	0028      	movs	r0, r5
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <_puts_r+0xdc>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	d101      	bne.n	8004cf4 <_puts_r+0x78>
 8004cf0:	68ac      	ldr	r4, [r5, #8]
 8004cf2:	e7d8      	b.n	8004ca6 <_puts_r+0x2a>
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <_puts_r+0xe0>)
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d1d5      	bne.n	8004ca6 <_puts_r+0x2a>
 8004cfa:	68ec      	ldr	r4, [r5, #12]
 8004cfc:	e7d3      	b.n	8004ca6 <_puts_r+0x2a>
 8004cfe:	3601      	adds	r6, #1
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	da04      	bge.n	8004d10 <_puts_r+0x94>
 8004d06:	69a2      	ldr	r2, [r4, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	dc16      	bgt.n	8004d3a <_puts_r+0xbe>
 8004d0c:	290a      	cmp	r1, #10
 8004d0e:	d014      	beq.n	8004d3a <_puts_r+0xbe>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	7019      	strb	r1, [r3, #0]
 8004d18:	68a3      	ldr	r3, [r4, #8]
 8004d1a:	7831      	ldrb	r1, [r6, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	2900      	cmp	r1, #0
 8004d20:	d1ed      	bne.n	8004cfe <_puts_r+0x82>
 8004d22:	60a3      	str	r3, [r4, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da0f      	bge.n	8004d48 <_puts_r+0xcc>
 8004d28:	0028      	movs	r0, r5
 8004d2a:	0022      	movs	r2, r4
 8004d2c:	310a      	adds	r1, #10
 8004d2e:	f000 f821 	bl	8004d74 <__swbuf_r>
 8004d32:	250a      	movs	r5, #10
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d1cd      	bne.n	8004cd4 <_puts_r+0x58>
 8004d38:	e7ca      	b.n	8004cd0 <_puts_r+0x54>
 8004d3a:	0022      	movs	r2, r4
 8004d3c:	0028      	movs	r0, r5
 8004d3e:	f000 f819 	bl	8004d74 <__swbuf_r>
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	d1e8      	bne.n	8004d18 <_puts_r+0x9c>
 8004d46:	e7c3      	b.n	8004cd0 <_puts_r+0x54>
 8004d48:	250a      	movs	r5, #10
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	6022      	str	r2, [r4, #0]
 8004d50:	701d      	strb	r5, [r3, #0]
 8004d52:	e7bf      	b.n	8004cd4 <_puts_r+0x58>
 8004d54:	08005860 	.word	0x08005860
 8004d58:	08005880 	.word	0x08005880
 8004d5c:	08005840 	.word	0x08005840

08004d60 <puts>:
 8004d60:	b510      	push	{r4, lr}
 8004d62:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <puts+0x10>)
 8004d64:	0001      	movs	r1, r0
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f7ff ff88 	bl	8004c7c <_puts_r>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	20000010 	.word	0x20000010

08004d74 <__swbuf_r>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	0005      	movs	r5, r0
 8004d78:	000e      	movs	r6, r1
 8004d7a:	0014      	movs	r4, r2
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d004      	beq.n	8004d8a <__swbuf_r+0x16>
 8004d80:	6983      	ldr	r3, [r0, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <__swbuf_r+0x16>
 8004d86:	f000 f9f1 	bl	800516c <__sinit>
 8004d8a:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <__swbuf_r+0xa0>)
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	d12e      	bne.n	8004dee <__swbuf_r+0x7a>
 8004d90:	686c      	ldr	r4, [r5, #4]
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	d532      	bpl.n	8004e02 <__swbuf_r+0x8e>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02f      	beq.n	8004e02 <__swbuf_r+0x8e>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	b2f7      	uxtb	r7, r6
 8004da8:	1a98      	subs	r0, r3, r2
 8004daa:	6963      	ldr	r3, [r4, #20]
 8004dac:	b2f6      	uxtb	r6, r6
 8004dae:	4283      	cmp	r3, r0
 8004db0:	dc05      	bgt.n	8004dbe <__swbuf_r+0x4a>
 8004db2:	0021      	movs	r1, r4
 8004db4:	0028      	movs	r0, r5
 8004db6:	f000 f937 	bl	8005028 <_fflush_r>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d127      	bne.n	8004e0e <__swbuf_r+0x9a>
 8004dbe:	68a3      	ldr	r3, [r4, #8]
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	60a3      	str	r3, [r4, #8]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	6022      	str	r2, [r4, #0]
 8004dcc:	701f      	strb	r7, [r3, #0]
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	4283      	cmp	r3, r0
 8004dd2:	d004      	beq.n	8004dde <__swbuf_r+0x6a>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	d507      	bpl.n	8004dea <__swbuf_r+0x76>
 8004dda:	2e0a      	cmp	r6, #10
 8004ddc:	d105      	bne.n	8004dea <__swbuf_r+0x76>
 8004dde:	0021      	movs	r1, r4
 8004de0:	0028      	movs	r0, r5
 8004de2:	f000 f921 	bl	8005028 <_fflush_r>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d111      	bne.n	8004e0e <__swbuf_r+0x9a>
 8004dea:	0030      	movs	r0, r6
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <__swbuf_r+0xa4>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d101      	bne.n	8004df8 <__swbuf_r+0x84>
 8004df4:	68ac      	ldr	r4, [r5, #8]
 8004df6:	e7cc      	b.n	8004d92 <__swbuf_r+0x1e>
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <__swbuf_r+0xa8>)
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d1c9      	bne.n	8004d92 <__swbuf_r+0x1e>
 8004dfe:	68ec      	ldr	r4, [r5, #12]
 8004e00:	e7c7      	b.n	8004d92 <__swbuf_r+0x1e>
 8004e02:	0021      	movs	r1, r4
 8004e04:	0028      	movs	r0, r5
 8004e06:	f000 f80b 	bl	8004e20 <__swsetup_r>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0c9      	beq.n	8004da2 <__swbuf_r+0x2e>
 8004e0e:	2601      	movs	r6, #1
 8004e10:	4276      	negs	r6, r6
 8004e12:	e7ea      	b.n	8004dea <__swbuf_r+0x76>
 8004e14:	08005860 	.word	0x08005860
 8004e18:	08005880 	.word	0x08005880
 8004e1c:	08005840 	.word	0x08005840

08004e20 <__swsetup_r>:
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <__swsetup_r+0xe0>)
 8004e22:	b570      	push	{r4, r5, r6, lr}
 8004e24:	681d      	ldr	r5, [r3, #0]
 8004e26:	0006      	movs	r6, r0
 8004e28:	000c      	movs	r4, r1
 8004e2a:	2d00      	cmp	r5, #0
 8004e2c:	d005      	beq.n	8004e3a <__swsetup_r+0x1a>
 8004e2e:	69ab      	ldr	r3, [r5, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <__swsetup_r+0x1a>
 8004e34:	0028      	movs	r0, r5
 8004e36:	f000 f999 	bl	800516c <__sinit>
 8004e3a:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <__swsetup_r+0xe4>)
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	d10f      	bne.n	8004e60 <__swsetup_r+0x40>
 8004e40:	686c      	ldr	r4, [r5, #4]
 8004e42:	230c      	movs	r3, #12
 8004e44:	5ee2      	ldrsh	r2, [r4, r3]
 8004e46:	b293      	uxth	r3, r2
 8004e48:	0711      	lsls	r1, r2, #28
 8004e4a:	d42d      	bmi.n	8004ea8 <__swsetup_r+0x88>
 8004e4c:	06d9      	lsls	r1, r3, #27
 8004e4e:	d411      	bmi.n	8004e74 <__swsetup_r+0x54>
 8004e50:	2309      	movs	r3, #9
 8004e52:	2001      	movs	r0, #1
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	3337      	adds	r3, #55	; 0x37
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	4240      	negs	r0, r0
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <__swsetup_r+0xe8>)
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d101      	bne.n	8004e6a <__swsetup_r+0x4a>
 8004e66:	68ac      	ldr	r4, [r5, #8]
 8004e68:	e7eb      	b.n	8004e42 <__swsetup_r+0x22>
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <__swsetup_r+0xec>)
 8004e6c:	429c      	cmp	r4, r3
 8004e6e:	d1e8      	bne.n	8004e42 <__swsetup_r+0x22>
 8004e70:	68ec      	ldr	r4, [r5, #12]
 8004e72:	e7e6      	b.n	8004e42 <__swsetup_r+0x22>
 8004e74:	075b      	lsls	r3, r3, #29
 8004e76:	d513      	bpl.n	8004ea0 <__swsetup_r+0x80>
 8004e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d008      	beq.n	8004e90 <__swsetup_r+0x70>
 8004e7e:	0023      	movs	r3, r4
 8004e80:	3344      	adds	r3, #68	; 0x44
 8004e82:	4299      	cmp	r1, r3
 8004e84:	d002      	beq.n	8004e8c <__swsetup_r+0x6c>
 8004e86:	0030      	movs	r0, r6
 8004e88:	f000 fa80 	bl	800538c <_free_r>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e90:	2224      	movs	r2, #36	; 0x24
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	4393      	bics	r3, r2
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	89a2      	ldrh	r2, [r4, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <__swsetup_r+0xa6>
 8004eae:	21a0      	movs	r1, #160	; 0xa0
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	0089      	lsls	r1, r1, #2
 8004eb6:	0092      	lsls	r2, r2, #2
 8004eb8:	400b      	ands	r3, r1
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <__swsetup_r+0xa6>
 8004ebe:	0021      	movs	r1, r4
 8004ec0:	0030      	movs	r0, r6
 8004ec2:	f000 fa1f 	bl	8005304 <__smakebuf_r>
 8004ec6:	220c      	movs	r2, #12
 8004ec8:	5ea3      	ldrsh	r3, [r4, r2]
 8004eca:	2001      	movs	r0, #1
 8004ecc:	001a      	movs	r2, r3
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	4002      	ands	r2, r0
 8004ed2:	4203      	tst	r3, r0
 8004ed4:	d00f      	beq.n	8004ef6 <__swsetup_r+0xd6>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60a2      	str	r2, [r4, #8]
 8004eda:	6962      	ldr	r2, [r4, #20]
 8004edc:	4252      	negs	r2, r2
 8004ede:	61a2      	str	r2, [r4, #24]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	6922      	ldr	r2, [r4, #16]
 8004ee4:	4282      	cmp	r2, r0
 8004ee6:	d1ba      	bne.n	8004e5e <__swsetup_r+0x3e>
 8004ee8:	060a      	lsls	r2, r1, #24
 8004eea:	d5b8      	bpl.n	8004e5e <__swsetup_r+0x3e>
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	3801      	subs	r0, #1
 8004ef4:	e7b3      	b.n	8004e5e <__swsetup_r+0x3e>
 8004ef6:	0788      	lsls	r0, r1, #30
 8004ef8:	d400      	bmi.n	8004efc <__swsetup_r+0xdc>
 8004efa:	6962      	ldr	r2, [r4, #20]
 8004efc:	60a2      	str	r2, [r4, #8]
 8004efe:	e7ef      	b.n	8004ee0 <__swsetup_r+0xc0>
 8004f00:	20000010 	.word	0x20000010
 8004f04:	08005860 	.word	0x08005860
 8004f08:	08005880 	.word	0x08005880
 8004f0c:	08005840 	.word	0x08005840

08004f10 <__sflush_r>:
 8004f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f12:	898b      	ldrh	r3, [r1, #12]
 8004f14:	0005      	movs	r5, r0
 8004f16:	000c      	movs	r4, r1
 8004f18:	071a      	lsls	r2, r3, #28
 8004f1a:	d45f      	bmi.n	8004fdc <__sflush_r+0xcc>
 8004f1c:	684a      	ldr	r2, [r1, #4]
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	dc04      	bgt.n	8004f2c <__sflush_r+0x1c>
 8004f22:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	dc01      	bgt.n	8004f2c <__sflush_r+0x1c>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f2e:	2f00      	cmp	r7, #0
 8004f30:	d0fa      	beq.n	8004f28 <__sflush_r+0x18>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	682e      	ldr	r6, [r5, #0]
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	0149      	lsls	r1, r1, #5
 8004f3e:	400a      	ands	r2, r1
 8004f40:	420b      	tst	r3, r1
 8004f42:	d034      	beq.n	8004fae <__sflush_r+0x9e>
 8004f44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	075b      	lsls	r3, r3, #29
 8004f4a:	d506      	bpl.n	8004f5a <__sflush_r+0x4a>
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	1ac0      	subs	r0, r0, r3
 8004f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <__sflush_r+0x4a>
 8004f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f58:	1ac0      	subs	r0, r0, r3
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	6a21      	ldr	r1, [r4, #32]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	0028      	movs	r0, r5
 8004f62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f64:	47b8      	blx	r7
 8004f66:	89a1      	ldrh	r1, [r4, #12]
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d106      	bne.n	8004f7a <__sflush_r+0x6a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	2b1d      	cmp	r3, #29
 8004f70:	d831      	bhi.n	8004fd6 <__sflush_r+0xc6>
 8004f72:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <__sflush_r+0x114>)
 8004f74:	40da      	lsrs	r2, r3
 8004f76:	07d3      	lsls	r3, r2, #31
 8004f78:	d52d      	bpl.n	8004fd6 <__sflush_r+0xc6>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	04cb      	lsls	r3, r1, #19
 8004f84:	d505      	bpl.n	8004f92 <__sflush_r+0x82>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d102      	bne.n	8004f90 <__sflush_r+0x80>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d100      	bne.n	8004f92 <__sflush_r+0x82>
 8004f90:	6560      	str	r0, [r4, #84]	; 0x54
 8004f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f94:	602e      	str	r6, [r5, #0]
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d0c6      	beq.n	8004f28 <__sflush_r+0x18>
 8004f9a:	0023      	movs	r3, r4
 8004f9c:	3344      	adds	r3, #68	; 0x44
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	d002      	beq.n	8004fa8 <__sflush_r+0x98>
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	f000 f9f2 	bl	800538c <_free_r>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	6360      	str	r0, [r4, #52]	; 0x34
 8004fac:	e7bd      	b.n	8004f2a <__sflush_r+0x1a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	0028      	movs	r0, r5
 8004fb2:	6a21      	ldr	r1, [r4, #32]
 8004fb4:	47b8      	blx	r7
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	d1c5      	bne.n	8004f46 <__sflush_r+0x36>
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0c2      	beq.n	8004f46 <__sflush_r+0x36>
 8004fc0:	2b1d      	cmp	r3, #29
 8004fc2:	d001      	beq.n	8004fc8 <__sflush_r+0xb8>
 8004fc4:	2b16      	cmp	r3, #22
 8004fc6:	d101      	bne.n	8004fcc <__sflush_r+0xbc>
 8004fc8:	602e      	str	r6, [r5, #0]
 8004fca:	e7ad      	b.n	8004f28 <__sflush_r+0x18>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	89a2      	ldrh	r2, [r4, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	e7a9      	b.n	8004f2a <__sflush_r+0x1a>
 8004fd6:	2340      	movs	r3, #64	; 0x40
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	e7fa      	b.n	8004fd2 <__sflush_r+0xc2>
 8004fdc:	690f      	ldr	r7, [r1, #16]
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	d0a2      	beq.n	8004f28 <__sflush_r+0x18>
 8004fe2:	680a      	ldr	r2, [r1, #0]
 8004fe4:	600f      	str	r7, [r1, #0]
 8004fe6:	1bd2      	subs	r2, r2, r7
 8004fe8:	9201      	str	r2, [sp, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	079b      	lsls	r3, r3, #30
 8004fee:	d100      	bne.n	8004ff2 <__sflush_r+0xe2>
 8004ff0:	694a      	ldr	r2, [r1, #20]
 8004ff2:	60a2      	str	r2, [r4, #8]
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dc00      	bgt.n	8004ffc <__sflush_r+0xec>
 8004ffa:	e795      	b.n	8004f28 <__sflush_r+0x18>
 8004ffc:	003a      	movs	r2, r7
 8004ffe:	0028      	movs	r0, r5
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	6a21      	ldr	r1, [r4, #32]
 8005004:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005006:	47b0      	blx	r6
 8005008:	2800      	cmp	r0, #0
 800500a:	dc06      	bgt.n	800501a <__sflush_r+0x10a>
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	2001      	movs	r0, #1
 8005010:	89a2      	ldrh	r2, [r4, #12]
 8005012:	4240      	negs	r0, r0
 8005014:	4313      	orrs	r3, r2
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	e787      	b.n	8004f2a <__sflush_r+0x1a>
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	183f      	adds	r7, r7, r0
 800501e:	1a1b      	subs	r3, r3, r0
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	e7e7      	b.n	8004ff4 <__sflush_r+0xe4>
 8005024:	20400001 	.word	0x20400001

08005028 <_fflush_r>:
 8005028:	690b      	ldr	r3, [r1, #16]
 800502a:	b570      	push	{r4, r5, r6, lr}
 800502c:	0005      	movs	r5, r0
 800502e:	000c      	movs	r4, r1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <_fflush_r+0x12>
 8005034:	2500      	movs	r5, #0
 8005036:	0028      	movs	r0, r5
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	2800      	cmp	r0, #0
 800503c:	d004      	beq.n	8005048 <_fflush_r+0x20>
 800503e:	6983      	ldr	r3, [r0, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <_fflush_r+0x20>
 8005044:	f000 f892 	bl	800516c <__sinit>
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <_fflush_r+0x74>)
 800504a:	429c      	cmp	r4, r3
 800504c:	d11b      	bne.n	8005086 <_fflush_r+0x5e>
 800504e:	686c      	ldr	r4, [r5, #4]
 8005050:	220c      	movs	r2, #12
 8005052:	5ea3      	ldrsh	r3, [r4, r2]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ed      	beq.n	8005034 <_fflush_r+0xc>
 8005058:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800505a:	07d2      	lsls	r2, r2, #31
 800505c:	d404      	bmi.n	8005068 <_fflush_r+0x40>
 800505e:	059b      	lsls	r3, r3, #22
 8005060:	d402      	bmi.n	8005068 <_fflush_r+0x40>
 8005062:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005064:	f000 f923 	bl	80052ae <__retarget_lock_acquire_recursive>
 8005068:	0028      	movs	r0, r5
 800506a:	0021      	movs	r1, r4
 800506c:	f7ff ff50 	bl	8004f10 <__sflush_r>
 8005070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005072:	0005      	movs	r5, r0
 8005074:	07db      	lsls	r3, r3, #31
 8005076:	d4de      	bmi.n	8005036 <_fflush_r+0xe>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	059b      	lsls	r3, r3, #22
 800507c:	d4db      	bmi.n	8005036 <_fflush_r+0xe>
 800507e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005080:	f000 f916 	bl	80052b0 <__retarget_lock_release_recursive>
 8005084:	e7d7      	b.n	8005036 <_fflush_r+0xe>
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <_fflush_r+0x78>)
 8005088:	429c      	cmp	r4, r3
 800508a:	d101      	bne.n	8005090 <_fflush_r+0x68>
 800508c:	68ac      	ldr	r4, [r5, #8]
 800508e:	e7df      	b.n	8005050 <_fflush_r+0x28>
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <_fflush_r+0x7c>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d1dc      	bne.n	8005050 <_fflush_r+0x28>
 8005096:	68ec      	ldr	r4, [r5, #12]
 8005098:	e7da      	b.n	8005050 <_fflush_r+0x28>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	08005860 	.word	0x08005860
 80050a0:	08005880 	.word	0x08005880
 80050a4:	08005840 	.word	0x08005840

080050a8 <std>:
 80050a8:	2300      	movs	r3, #0
 80050aa:	b510      	push	{r4, lr}
 80050ac:	0004      	movs	r4, r0
 80050ae:	6003      	str	r3, [r0, #0]
 80050b0:	6043      	str	r3, [r0, #4]
 80050b2:	6083      	str	r3, [r0, #8]
 80050b4:	8181      	strh	r1, [r0, #12]
 80050b6:	6643      	str	r3, [r0, #100]	; 0x64
 80050b8:	0019      	movs	r1, r3
 80050ba:	81c2      	strh	r2, [r0, #14]
 80050bc:	6103      	str	r3, [r0, #16]
 80050be:	6143      	str	r3, [r0, #20]
 80050c0:	6183      	str	r3, [r0, #24]
 80050c2:	2208      	movs	r2, #8
 80050c4:	305c      	adds	r0, #92	; 0x5c
 80050c6:	f7ff fdd0 	bl	8004c6a <memset>
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x38>)
 80050cc:	6224      	str	r4, [r4, #32]
 80050ce:	6263      	str	r3, [r4, #36]	; 0x24
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <std+0x3c>)
 80050d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <std+0x40>)
 80050d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <std+0x44>)
 80050da:	6323      	str	r3, [r4, #48]	; 0x30
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	08005575 	.word	0x08005575
 80050e4:	0800559d 	.word	0x0800559d
 80050e8:	080055d5 	.word	0x080055d5
 80050ec:	08005601 	.word	0x08005601

080050f0 <_cleanup_r>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	4902      	ldr	r1, [pc, #8]	; (80050fc <_cleanup_r+0xc>)
 80050f4:	f000 f8ba 	bl	800526c <_fwalk_reent>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	08005029 	.word	0x08005029

08005100 <__sfmoreglue>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	2568      	movs	r5, #104	; 0x68
 8005104:	1e4a      	subs	r2, r1, #1
 8005106:	4355      	muls	r5, r2
 8005108:	000e      	movs	r6, r1
 800510a:	0029      	movs	r1, r5
 800510c:	3174      	adds	r1, #116	; 0x74
 800510e:	f000 f9a9 	bl	8005464 <_malloc_r>
 8005112:	1e04      	subs	r4, r0, #0
 8005114:	d008      	beq.n	8005128 <__sfmoreglue+0x28>
 8005116:	2100      	movs	r1, #0
 8005118:	002a      	movs	r2, r5
 800511a:	6001      	str	r1, [r0, #0]
 800511c:	6046      	str	r6, [r0, #4]
 800511e:	300c      	adds	r0, #12
 8005120:	60a0      	str	r0, [r4, #8]
 8005122:	3268      	adds	r2, #104	; 0x68
 8005124:	f7ff fda1 	bl	8004c6a <memset>
 8005128:	0020      	movs	r0, r4
 800512a:	bd70      	pop	{r4, r5, r6, pc}

0800512c <__sfp_lock_acquire>:
 800512c:	b510      	push	{r4, lr}
 800512e:	4802      	ldr	r0, [pc, #8]	; (8005138 <__sfp_lock_acquire+0xc>)
 8005130:	f000 f8bd 	bl	80052ae <__retarget_lock_acquire_recursive>
 8005134:	bd10      	pop	{r4, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20000ed5 	.word	0x20000ed5

0800513c <__sfp_lock_release>:
 800513c:	b510      	push	{r4, lr}
 800513e:	4802      	ldr	r0, [pc, #8]	; (8005148 <__sfp_lock_release+0xc>)
 8005140:	f000 f8b6 	bl	80052b0 <__retarget_lock_release_recursive>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000ed5 	.word	0x20000ed5

0800514c <__sinit_lock_acquire>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4802      	ldr	r0, [pc, #8]	; (8005158 <__sinit_lock_acquire+0xc>)
 8005150:	f000 f8ad 	bl	80052ae <__retarget_lock_acquire_recursive>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	20000ed6 	.word	0x20000ed6

0800515c <__sinit_lock_release>:
 800515c:	b510      	push	{r4, lr}
 800515e:	4802      	ldr	r0, [pc, #8]	; (8005168 <__sinit_lock_release+0xc>)
 8005160:	f000 f8a6 	bl	80052b0 <__retarget_lock_release_recursive>
 8005164:	bd10      	pop	{r4, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	20000ed6 	.word	0x20000ed6

0800516c <__sinit>:
 800516c:	b513      	push	{r0, r1, r4, lr}
 800516e:	0004      	movs	r4, r0
 8005170:	f7ff ffec 	bl	800514c <__sinit_lock_acquire>
 8005174:	69a3      	ldr	r3, [r4, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <__sinit+0x14>
 800517a:	f7ff ffef 	bl	800515c <__sinit_lock_release>
 800517e:	bd13      	pop	{r0, r1, r4, pc}
 8005180:	64a3      	str	r3, [r4, #72]	; 0x48
 8005182:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005184:	6523      	str	r3, [r4, #80]	; 0x50
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <__sinit+0x68>)
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <__sinit+0x6c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	62a2      	str	r2, [r4, #40]	; 0x28
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	42a3      	cmp	r3, r4
 8005192:	d101      	bne.n	8005198 <__sinit+0x2c>
 8005194:	2301      	movs	r3, #1
 8005196:	61a3      	str	r3, [r4, #24]
 8005198:	0020      	movs	r0, r4
 800519a:	f000 f81f 	bl	80051dc <__sfp>
 800519e:	6060      	str	r0, [r4, #4]
 80051a0:	0020      	movs	r0, r4
 80051a2:	f000 f81b 	bl	80051dc <__sfp>
 80051a6:	60a0      	str	r0, [r4, #8]
 80051a8:	0020      	movs	r0, r4
 80051aa:	f000 f817 	bl	80051dc <__sfp>
 80051ae:	2200      	movs	r2, #0
 80051b0:	2104      	movs	r1, #4
 80051b2:	60e0      	str	r0, [r4, #12]
 80051b4:	6860      	ldr	r0, [r4, #4]
 80051b6:	f7ff ff77 	bl	80050a8 <std>
 80051ba:	2201      	movs	r2, #1
 80051bc:	2109      	movs	r1, #9
 80051be:	68a0      	ldr	r0, [r4, #8]
 80051c0:	f7ff ff72 	bl	80050a8 <std>
 80051c4:	2202      	movs	r2, #2
 80051c6:	2112      	movs	r1, #18
 80051c8:	68e0      	ldr	r0, [r4, #12]
 80051ca:	f7ff ff6d 	bl	80050a8 <std>
 80051ce:	2301      	movs	r3, #1
 80051d0:	61a3      	str	r3, [r4, #24]
 80051d2:	e7d2      	b.n	800517a <__sinit+0xe>
 80051d4:	0800583c 	.word	0x0800583c
 80051d8:	080050f1 	.word	0x080050f1

080051dc <__sfp>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	0007      	movs	r7, r0
 80051e0:	f7ff ffa4 	bl	800512c <__sfp_lock_acquire>
 80051e4:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <__sfp+0x88>)
 80051e6:	681e      	ldr	r6, [r3, #0]
 80051e8:	69b3      	ldr	r3, [r6, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <__sfp+0x18>
 80051ee:	0030      	movs	r0, r6
 80051f0:	f7ff ffbc 	bl	800516c <__sinit>
 80051f4:	3648      	adds	r6, #72	; 0x48
 80051f6:	68b4      	ldr	r4, [r6, #8]
 80051f8:	6873      	ldr	r3, [r6, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	d504      	bpl.n	8005208 <__sfp+0x2c>
 80051fe:	6833      	ldr	r3, [r6, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d022      	beq.n	800524a <__sfp+0x6e>
 8005204:	6836      	ldr	r6, [r6, #0]
 8005206:	e7f6      	b.n	80051f6 <__sfp+0x1a>
 8005208:	220c      	movs	r2, #12
 800520a:	5ea5      	ldrsh	r5, [r4, r2]
 800520c:	2d00      	cmp	r5, #0
 800520e:	d11a      	bne.n	8005246 <__sfp+0x6a>
 8005210:	0020      	movs	r0, r4
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <__sfp+0x8c>)
 8005214:	3058      	adds	r0, #88	; 0x58
 8005216:	60e3      	str	r3, [r4, #12]
 8005218:	6665      	str	r5, [r4, #100]	; 0x64
 800521a:	f000 f847 	bl	80052ac <__retarget_lock_init_recursive>
 800521e:	f7ff ff8d 	bl	800513c <__sfp_lock_release>
 8005222:	0020      	movs	r0, r4
 8005224:	2208      	movs	r2, #8
 8005226:	0029      	movs	r1, r5
 8005228:	6025      	str	r5, [r4, #0]
 800522a:	60a5      	str	r5, [r4, #8]
 800522c:	6065      	str	r5, [r4, #4]
 800522e:	6125      	str	r5, [r4, #16]
 8005230:	6165      	str	r5, [r4, #20]
 8005232:	61a5      	str	r5, [r4, #24]
 8005234:	305c      	adds	r0, #92	; 0x5c
 8005236:	f7ff fd18 	bl	8004c6a <memset>
 800523a:	6365      	str	r5, [r4, #52]	; 0x34
 800523c:	63a5      	str	r5, [r4, #56]	; 0x38
 800523e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005240:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005242:	0020      	movs	r0, r4
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005246:	3468      	adds	r4, #104	; 0x68
 8005248:	e7d7      	b.n	80051fa <__sfp+0x1e>
 800524a:	2104      	movs	r1, #4
 800524c:	0038      	movs	r0, r7
 800524e:	f7ff ff57 	bl	8005100 <__sfmoreglue>
 8005252:	1e04      	subs	r4, r0, #0
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	d1d5      	bne.n	8005204 <__sfp+0x28>
 8005258:	f7ff ff70 	bl	800513c <__sfp_lock_release>
 800525c:	230c      	movs	r3, #12
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	e7ef      	b.n	8005242 <__sfp+0x66>
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	0800583c 	.word	0x0800583c
 8005268:	ffff0001 	.word	0xffff0001

0800526c <_fwalk_reent>:
 800526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526e:	0004      	movs	r4, r0
 8005270:	0006      	movs	r6, r0
 8005272:	2700      	movs	r7, #0
 8005274:	9101      	str	r1, [sp, #4]
 8005276:	3448      	adds	r4, #72	; 0x48
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	68a5      	ldr	r5, [r4, #8]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	d504      	bpl.n	8005290 <_fwalk_reent+0x24>
 8005286:	6824      	ldr	r4, [r4, #0]
 8005288:	2c00      	cmp	r4, #0
 800528a:	d1f5      	bne.n	8005278 <_fwalk_reent+0xc>
 800528c:	0038      	movs	r0, r7
 800528e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005290:	89ab      	ldrh	r3, [r5, #12]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d908      	bls.n	80052a8 <_fwalk_reent+0x3c>
 8005296:	220e      	movs	r2, #14
 8005298:	5eab      	ldrsh	r3, [r5, r2]
 800529a:	3301      	adds	r3, #1
 800529c:	d004      	beq.n	80052a8 <_fwalk_reent+0x3c>
 800529e:	0029      	movs	r1, r5
 80052a0:	0030      	movs	r0, r6
 80052a2:	9b01      	ldr	r3, [sp, #4]
 80052a4:	4798      	blx	r3
 80052a6:	4307      	orrs	r7, r0
 80052a8:	3568      	adds	r5, #104	; 0x68
 80052aa:	e7e8      	b.n	800527e <_fwalk_reent+0x12>

080052ac <__retarget_lock_init_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__retarget_lock_acquire_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <__retarget_lock_release_recursive>:
 80052b0:	4770      	bx	lr
	...

080052b4 <__swhatbuf_r>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	000e      	movs	r6, r1
 80052b8:	001d      	movs	r5, r3
 80052ba:	230e      	movs	r3, #14
 80052bc:	5ec9      	ldrsh	r1, [r1, r3]
 80052be:	0014      	movs	r4, r2
 80052c0:	b096      	sub	sp, #88	; 0x58
 80052c2:	2900      	cmp	r1, #0
 80052c4:	da08      	bge.n	80052d8 <__swhatbuf_r+0x24>
 80052c6:	220c      	movs	r2, #12
 80052c8:	5eb3      	ldrsh	r3, [r6, r2]
 80052ca:	2200      	movs	r2, #0
 80052cc:	602a      	str	r2, [r5, #0]
 80052ce:	061b      	lsls	r3, r3, #24
 80052d0:	d411      	bmi.n	80052f6 <__swhatbuf_r+0x42>
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	e00f      	b.n	80052f8 <__swhatbuf_r+0x44>
 80052d8:	466a      	mov	r2, sp
 80052da:	f000 f9bd 	bl	8005658 <_fstat_r>
 80052de:	2800      	cmp	r0, #0
 80052e0:	dbf1      	blt.n	80052c6 <__swhatbuf_r+0x12>
 80052e2:	23f0      	movs	r3, #240	; 0xf0
 80052e4:	9901      	ldr	r1, [sp, #4]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	4019      	ands	r1, r3
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <__swhatbuf_r+0x4c>)
 80052ec:	18c9      	adds	r1, r1, r3
 80052ee:	424b      	negs	r3, r1
 80052f0:	4159      	adcs	r1, r3
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	e7ed      	b.n	80052d2 <__swhatbuf_r+0x1e>
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	2000      	movs	r0, #0
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	b016      	add	sp, #88	; 0x58
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	ffffe000 	.word	0xffffe000

08005304 <__smakebuf_r>:
 8005304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005306:	2602      	movs	r6, #2
 8005308:	898b      	ldrh	r3, [r1, #12]
 800530a:	0005      	movs	r5, r0
 800530c:	000c      	movs	r4, r1
 800530e:	4233      	tst	r3, r6
 8005310:	d006      	beq.n	8005320 <__smakebuf_r+0x1c>
 8005312:	0023      	movs	r3, r4
 8005314:	3347      	adds	r3, #71	; 0x47
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2301      	movs	r3, #1
 800531c:	6163      	str	r3, [r4, #20]
 800531e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005320:	466a      	mov	r2, sp
 8005322:	ab01      	add	r3, sp, #4
 8005324:	f7ff ffc6 	bl	80052b4 <__swhatbuf_r>
 8005328:	9900      	ldr	r1, [sp, #0]
 800532a:	0007      	movs	r7, r0
 800532c:	0028      	movs	r0, r5
 800532e:	f000 f899 	bl	8005464 <_malloc_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	d108      	bne.n	8005348 <__smakebuf_r+0x44>
 8005336:	220c      	movs	r2, #12
 8005338:	5ea3      	ldrsh	r3, [r4, r2]
 800533a:	059a      	lsls	r2, r3, #22
 800533c:	d4ef      	bmi.n	800531e <__smakebuf_r+0x1a>
 800533e:	2203      	movs	r2, #3
 8005340:	4393      	bics	r3, r2
 8005342:	431e      	orrs	r6, r3
 8005344:	81a6      	strh	r6, [r4, #12]
 8005346:	e7e4      	b.n	8005312 <__smakebuf_r+0xe>
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <__smakebuf_r+0x84>)
 800534a:	62ab      	str	r3, [r5, #40]	; 0x28
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	89a2      	ldrh	r2, [r4, #12]
 8005350:	6020      	str	r0, [r4, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	81a3      	strh	r3, [r4, #12]
 8005356:	9b00      	ldr	r3, [sp, #0]
 8005358:	6120      	str	r0, [r4, #16]
 800535a:	6163      	str	r3, [r4, #20]
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <__smakebuf_r+0x7a>
 8005362:	0028      	movs	r0, r5
 8005364:	230e      	movs	r3, #14
 8005366:	5ee1      	ldrsh	r1, [r4, r3]
 8005368:	f000 f988 	bl	800567c <_isatty_r>
 800536c:	2800      	cmp	r0, #0
 800536e:	d006      	beq.n	800537e <__smakebuf_r+0x7a>
 8005370:	2203      	movs	r2, #3
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	4393      	bics	r3, r2
 8005376:	001a      	movs	r2, r3
 8005378:	2301      	movs	r3, #1
 800537a:	4313      	orrs	r3, r2
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	89a0      	ldrh	r0, [r4, #12]
 8005380:	4307      	orrs	r7, r0
 8005382:	81a7      	strh	r7, [r4, #12]
 8005384:	e7cb      	b.n	800531e <__smakebuf_r+0x1a>
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	080050f1 	.word	0x080050f1

0800538c <_free_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	0005      	movs	r5, r0
 8005390:	2900      	cmp	r1, #0
 8005392:	d010      	beq.n	80053b6 <_free_r+0x2a>
 8005394:	1f0c      	subs	r4, r1, #4
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	da00      	bge.n	800539e <_free_r+0x12>
 800539c:	18e4      	adds	r4, r4, r3
 800539e:	0028      	movs	r0, r5
 80053a0:	f000 f992 	bl	80056c8 <__malloc_lock>
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <_free_r+0x90>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <_free_r+0x2c>
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6014      	str	r4, [r2, #0]
 80053b0:	0028      	movs	r0, r5
 80053b2:	f000 f991 	bl	80056d8 <__malloc_unlock>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d908      	bls.n	80053ce <_free_r+0x42>
 80053bc:	6821      	ldr	r1, [r4, #0]
 80053be:	1860      	adds	r0, r4, r1
 80053c0:	4283      	cmp	r3, r0
 80053c2:	d1f3      	bne.n	80053ac <_free_r+0x20>
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	1841      	adds	r1, r0, r1
 80053ca:	6021      	str	r1, [r4, #0]
 80053cc:	e7ee      	b.n	80053ac <_free_r+0x20>
 80053ce:	001a      	movs	r2, r3
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <_free_r+0x4e>
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	d9f9      	bls.n	80053ce <_free_r+0x42>
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	1850      	adds	r0, r2, r1
 80053de:	42a0      	cmp	r0, r4
 80053e0:	d10b      	bne.n	80053fa <_free_r+0x6e>
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	1809      	adds	r1, r1, r0
 80053e6:	1850      	adds	r0, r2, r1
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	4283      	cmp	r3, r0
 80053ec:	d1e0      	bne.n	80053b0 <_free_r+0x24>
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	1841      	adds	r1, r0, r1
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	6053      	str	r3, [r2, #4]
 80053f8:	e7da      	b.n	80053b0 <_free_r+0x24>
 80053fa:	42a0      	cmp	r0, r4
 80053fc:	d902      	bls.n	8005404 <_free_r+0x78>
 80053fe:	230c      	movs	r3, #12
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	e7d5      	b.n	80053b0 <_free_r+0x24>
 8005404:	6821      	ldr	r1, [r4, #0]
 8005406:	1860      	adds	r0, r4, r1
 8005408:	4283      	cmp	r3, r0
 800540a:	d103      	bne.n	8005414 <_free_r+0x88>
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	1841      	adds	r1, r0, r1
 8005412:	6021      	str	r1, [r4, #0]
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6054      	str	r4, [r2, #4]
 8005418:	e7ca      	b.n	80053b0 <_free_r+0x24>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	20000ed8 	.word	0x20000ed8

08005420 <sbrk_aligned>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4e0f      	ldr	r6, [pc, #60]	; (8005460 <sbrk_aligned+0x40>)
 8005424:	000d      	movs	r5, r1
 8005426:	6831      	ldr	r1, [r6, #0]
 8005428:	0004      	movs	r4, r0
 800542a:	2900      	cmp	r1, #0
 800542c:	d102      	bne.n	8005434 <sbrk_aligned+0x14>
 800542e:	f000 f88f 	bl	8005550 <_sbrk_r>
 8005432:	6030      	str	r0, [r6, #0]
 8005434:	0029      	movs	r1, r5
 8005436:	0020      	movs	r0, r4
 8005438:	f000 f88a 	bl	8005550 <_sbrk_r>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d00a      	beq.n	8005456 <sbrk_aligned+0x36>
 8005440:	2303      	movs	r3, #3
 8005442:	1cc5      	adds	r5, r0, #3
 8005444:	439d      	bics	r5, r3
 8005446:	42a8      	cmp	r0, r5
 8005448:	d007      	beq.n	800545a <sbrk_aligned+0x3a>
 800544a:	1a29      	subs	r1, r5, r0
 800544c:	0020      	movs	r0, r4
 800544e:	f000 f87f 	bl	8005550 <_sbrk_r>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	d101      	bne.n	800545a <sbrk_aligned+0x3a>
 8005456:	2501      	movs	r5, #1
 8005458:	426d      	negs	r5, r5
 800545a:	0028      	movs	r0, r5
 800545c:	bd70      	pop	{r4, r5, r6, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	20000edc 	.word	0x20000edc

08005464 <_malloc_r>:
 8005464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005466:	2203      	movs	r2, #3
 8005468:	1ccb      	adds	r3, r1, #3
 800546a:	4393      	bics	r3, r2
 800546c:	3308      	adds	r3, #8
 800546e:	0006      	movs	r6, r0
 8005470:	001f      	movs	r7, r3
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d232      	bcs.n	80054dc <_malloc_r+0x78>
 8005476:	270c      	movs	r7, #12
 8005478:	42b9      	cmp	r1, r7
 800547a:	d831      	bhi.n	80054e0 <_malloc_r+0x7c>
 800547c:	0030      	movs	r0, r6
 800547e:	f000 f923 	bl	80056c8 <__malloc_lock>
 8005482:	4d32      	ldr	r5, [pc, #200]	; (800554c <_malloc_r+0xe8>)
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	001c      	movs	r4, r3
 8005488:	2c00      	cmp	r4, #0
 800548a:	d12e      	bne.n	80054ea <_malloc_r+0x86>
 800548c:	0039      	movs	r1, r7
 800548e:	0030      	movs	r0, r6
 8005490:	f7ff ffc6 	bl	8005420 <sbrk_aligned>
 8005494:	0004      	movs	r4, r0
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	d11e      	bne.n	80054d8 <_malloc_r+0x74>
 800549a:	682c      	ldr	r4, [r5, #0]
 800549c:	0025      	movs	r5, r4
 800549e:	2d00      	cmp	r5, #0
 80054a0:	d14a      	bne.n	8005538 <_malloc_r+0xd4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	0029      	movs	r1, r5
 80054a6:	18e3      	adds	r3, r4, r3
 80054a8:	0030      	movs	r0, r6
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	f000 f850 	bl	8005550 <_sbrk_r>
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	4283      	cmp	r3, r0
 80054b4:	d143      	bne.n	800553e <_malloc_r+0xda>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	3703      	adds	r7, #3
 80054ba:	1aff      	subs	r7, r7, r3
 80054bc:	2303      	movs	r3, #3
 80054be:	439f      	bics	r7, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	2f0c      	cmp	r7, #12
 80054c4:	d200      	bcs.n	80054c8 <_malloc_r+0x64>
 80054c6:	270c      	movs	r7, #12
 80054c8:	0039      	movs	r1, r7
 80054ca:	0030      	movs	r0, r6
 80054cc:	f7ff ffa8 	bl	8005420 <sbrk_aligned>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d034      	beq.n	800553e <_malloc_r+0xda>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	19df      	adds	r7, r3, r7
 80054d8:	6027      	str	r7, [r4, #0]
 80054da:	e013      	b.n	8005504 <_malloc_r+0xa0>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dacb      	bge.n	8005478 <_malloc_r+0x14>
 80054e0:	230c      	movs	r3, #12
 80054e2:	2500      	movs	r5, #0
 80054e4:	6033      	str	r3, [r6, #0]
 80054e6:	0028      	movs	r0, r5
 80054e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	1bd1      	subs	r1, r2, r7
 80054ee:	d420      	bmi.n	8005532 <_malloc_r+0xce>
 80054f0:	290b      	cmp	r1, #11
 80054f2:	d917      	bls.n	8005524 <_malloc_r+0xc0>
 80054f4:	19e2      	adds	r2, r4, r7
 80054f6:	6027      	str	r7, [r4, #0]
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d111      	bne.n	8005520 <_malloc_r+0xbc>
 80054fc:	602a      	str	r2, [r5, #0]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	0030      	movs	r0, r6
 8005506:	0025      	movs	r5, r4
 8005508:	f000 f8e6 	bl	80056d8 <__malloc_unlock>
 800550c:	2207      	movs	r2, #7
 800550e:	350b      	adds	r5, #11
 8005510:	1d23      	adds	r3, r4, #4
 8005512:	4395      	bics	r5, r2
 8005514:	1aea      	subs	r2, r5, r3
 8005516:	429d      	cmp	r5, r3
 8005518:	d0e5      	beq.n	80054e6 <_malloc_r+0x82>
 800551a:	1b5b      	subs	r3, r3, r5
 800551c:	50a3      	str	r3, [r4, r2]
 800551e:	e7e2      	b.n	80054e6 <_malloc_r+0x82>
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e7ec      	b.n	80054fe <_malloc_r+0x9a>
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	42a3      	cmp	r3, r4
 8005528:	d101      	bne.n	800552e <_malloc_r+0xca>
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	e7ea      	b.n	8005504 <_malloc_r+0xa0>
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	e7e8      	b.n	8005504 <_malloc_r+0xa0>
 8005532:	0023      	movs	r3, r4
 8005534:	6864      	ldr	r4, [r4, #4]
 8005536:	e7a7      	b.n	8005488 <_malloc_r+0x24>
 8005538:	002c      	movs	r4, r5
 800553a:	686d      	ldr	r5, [r5, #4]
 800553c:	e7af      	b.n	800549e <_malloc_r+0x3a>
 800553e:	230c      	movs	r3, #12
 8005540:	0030      	movs	r0, r6
 8005542:	6033      	str	r3, [r6, #0]
 8005544:	f000 f8c8 	bl	80056d8 <__malloc_unlock>
 8005548:	e7cd      	b.n	80054e6 <_malloc_r+0x82>
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	20000ed8 	.word	0x20000ed8

08005550 <_sbrk_r>:
 8005550:	2300      	movs	r3, #0
 8005552:	b570      	push	{r4, r5, r6, lr}
 8005554:	4d06      	ldr	r5, [pc, #24]	; (8005570 <_sbrk_r+0x20>)
 8005556:	0004      	movs	r4, r0
 8005558:	0008      	movs	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb f9c8 	bl	80008f0 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d103      	bne.n	800556c <_sbrk_r+0x1c>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d000      	beq.n	800556c <_sbrk_r+0x1c>
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	bd70      	pop	{r4, r5, r6, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	20000ee0 	.word	0x20000ee0

08005574 <__sread>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	000c      	movs	r4, r1
 8005578:	250e      	movs	r5, #14
 800557a:	5f49      	ldrsh	r1, [r1, r5]
 800557c:	f000 f8b4 	bl	80056e8 <_read_r>
 8005580:	2800      	cmp	r0, #0
 8005582:	db03      	blt.n	800558c <__sread+0x18>
 8005584:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005586:	181b      	adds	r3, r3, r0
 8005588:	6563      	str	r3, [r4, #84]	; 0x54
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	4a02      	ldr	r2, [pc, #8]	; (8005598 <__sread+0x24>)
 8005590:	4013      	ands	r3, r2
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	e7f9      	b.n	800558a <__sread+0x16>
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	ffffefff 	.word	0xffffefff

0800559c <__swrite>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	001f      	movs	r7, r3
 80055a0:	898b      	ldrh	r3, [r1, #12]
 80055a2:	0005      	movs	r5, r0
 80055a4:	000c      	movs	r4, r1
 80055a6:	0016      	movs	r6, r2
 80055a8:	05db      	lsls	r3, r3, #23
 80055aa:	d505      	bpl.n	80055b8 <__swrite+0x1c>
 80055ac:	230e      	movs	r3, #14
 80055ae:	5ec9      	ldrsh	r1, [r1, r3]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2302      	movs	r3, #2
 80055b4:	f000 f874 	bl	80056a0 <_lseek_r>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <__swrite+0x34>)
 80055bc:	0028      	movs	r0, r5
 80055be:	4013      	ands	r3, r2
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	0032      	movs	r2, r6
 80055c4:	230e      	movs	r3, #14
 80055c6:	5ee1      	ldrsh	r1, [r4, r3]
 80055c8:	003b      	movs	r3, r7
 80055ca:	f000 f81f 	bl	800560c <_write_r>
 80055ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d0:	ffffefff 	.word	0xffffefff

080055d4 <__sseek>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	000c      	movs	r4, r1
 80055d8:	250e      	movs	r5, #14
 80055da:	5f49      	ldrsh	r1, [r1, r5]
 80055dc:	f000 f860 	bl	80056a0 <_lseek_r>
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	1c42      	adds	r2, r0, #1
 80055e4:	d103      	bne.n	80055ee <__sseek+0x1a>
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <__sseek+0x28>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	0152      	lsls	r2, r2, #5
 80055f2:	4313      	orrs	r3, r2
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	6560      	str	r0, [r4, #84]	; 0x54
 80055f8:	e7f8      	b.n	80055ec <__sseek+0x18>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	ffffefff 	.word	0xffffefff

08005600 <__sclose>:
 8005600:	b510      	push	{r4, lr}
 8005602:	230e      	movs	r3, #14
 8005604:	5ec9      	ldrsh	r1, [r1, r3]
 8005606:	f000 f815 	bl	8005634 <_close_r>
 800560a:	bd10      	pop	{r4, pc}

0800560c <_write_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0004      	movs	r4, r0
 8005610:	0008      	movs	r0, r1
 8005612:	0011      	movs	r1, r2
 8005614:	001a      	movs	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	; (8005630 <_write_r+0x24>)
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fb f91f 	bl	800085e <_write>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d103      	bne.n	800562c <_write_r+0x20>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <_write_r+0x20>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	20000ee0 	.word	0x20000ee0

08005634 <_close_r>:
 8005634:	2300      	movs	r3, #0
 8005636:	b570      	push	{r4, r5, r6, lr}
 8005638:	4d06      	ldr	r5, [pc, #24]	; (8005654 <_close_r+0x20>)
 800563a:	0004      	movs	r4, r0
 800563c:	0008      	movs	r0, r1
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	f7fb f929 	bl	8000896 <_close>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d103      	bne.n	8005650 <_close_r+0x1c>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d000      	beq.n	8005650 <_close_r+0x1c>
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	bd70      	pop	{r4, r5, r6, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	20000ee0 	.word	0x20000ee0

08005658 <_fstat_r>:
 8005658:	2300      	movs	r3, #0
 800565a:	b570      	push	{r4, r5, r6, lr}
 800565c:	4d06      	ldr	r5, [pc, #24]	; (8005678 <_fstat_r+0x20>)
 800565e:	0004      	movs	r4, r0
 8005660:	0008      	movs	r0, r1
 8005662:	0011      	movs	r1, r2
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	f7fb f920 	bl	80008aa <_fstat>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d103      	bne.n	8005676 <_fstat_r+0x1e>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d000      	beq.n	8005676 <_fstat_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	20000ee0 	.word	0x20000ee0

0800567c <_isatty_r>:
 800567c:	2300      	movs	r3, #0
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	4d06      	ldr	r5, [pc, #24]	; (800569c <_isatty_r+0x20>)
 8005682:	0004      	movs	r4, r0
 8005684:	0008      	movs	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb f91d 	bl	80008c6 <_isatty>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d103      	bne.n	8005698 <_isatty_r+0x1c>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <_isatty_r+0x1c>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	20000ee0 	.word	0x20000ee0

080056a0 <_lseek_r>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	0004      	movs	r4, r0
 80056a4:	0008      	movs	r0, r1
 80056a6:	0011      	movs	r1, r2
 80056a8:	001a      	movs	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	4d05      	ldr	r5, [pc, #20]	; (80056c4 <_lseek_r+0x24>)
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f7fb f912 	bl	80008d8 <_lseek>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d103      	bne.n	80056c0 <_lseek_r+0x20>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d000      	beq.n	80056c0 <_lseek_r+0x20>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	20000ee0 	.word	0x20000ee0

080056c8 <__malloc_lock>:
 80056c8:	b510      	push	{r4, lr}
 80056ca:	4802      	ldr	r0, [pc, #8]	; (80056d4 <__malloc_lock+0xc>)
 80056cc:	f7ff fdef 	bl	80052ae <__retarget_lock_acquire_recursive>
 80056d0:	bd10      	pop	{r4, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	20000ed4 	.word	0x20000ed4

080056d8 <__malloc_unlock>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	4802      	ldr	r0, [pc, #8]	; (80056e4 <__malloc_unlock+0xc>)
 80056dc:	f7ff fde8 	bl	80052b0 <__retarget_lock_release_recursive>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	20000ed4 	.word	0x20000ed4

080056e8 <_read_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	0004      	movs	r4, r0
 80056ec:	0008      	movs	r0, r1
 80056ee:	0011      	movs	r1, r2
 80056f0:	001a      	movs	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	; (800570c <_read_r+0x24>)
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb f894 	bl	8000824 <_read>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d103      	bne.n	8005708 <_read_r+0x20>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <_read_r+0x20>
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	20000ee0 	.word	0x20000ee0

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
